<analysis>
The previous AI engineer focused on achieving reliable social media publishing (Facebook/Instagram) for the PWA, starting from a state where connections were simulated or failing silently. The primary hurdles were persistent OAuth failures (using invalid fallback tokens like ) and the inability to publish images due to access control, incorrect URL formats (WebP/no extension), and reliance on unstable URL uploads. The work involved major architectural changes: refactoring the OAuth flow to the mandatory 3-step token exchange (code -> short-lived -> long-lived -> page token, all starting with EAA), implementing unauthenticated image serving (converting internal paths to public ), forcing automatic conversion of all images to JPG, and crucially, switching from URL-based publication to the more reliable **binary upload ()** method for Facebook. The system is now technically sound, but the immediate blockage is identified as an external configuration issue in the Facebook Developer App, preventing the final EAA token saving due to a persistent AJAX error encountered during the callback finalization. The engineer analyzed the user's Facebook App settings and provided the precise external configurations required.
</analysis>

<product_requirements>
The Claire et Marcus PWA's core mission is to automate AI-driven social media content generation. The essential current requirement is to implement robust, real-time social media publishing (Facebook and Instagram) upon clicking the Publier button, successfully transitioning posts to a published status. This required stabilizing integrations that were using simulated connections or invalid tokens. Specific implementations include: refining post modification workflows, enabling manual date/time scheduling via calendar, and ensuring validated posts are read-only. The major feature implemented is the backend integration of the Facebook/Instagram Graph API v20.0 for actual publication, specifically ensuring that both text and images are published successfully. This required eliminating the use of temporary tokens (), utilizing permanent Page Access Tokens (starting with EAA), securing public access to images, and implementing the binary image upload method.
</product_requirements>

<key_technical_concepts>
- **API Integration:** Facebook Graph API v20.0, Instagram Graph API (2-step process).
- **OAuth 2.0:** Full 3-step token exchange flow (code -> short-lived -> long-lived user token -> page access token, prefixed EAA).
- **Media Handling:** GridFS, FastAPI streaming, automatic image conversion (Pillow for WebP/PNG to JPG), and reliable binary image upload ( parameter).
- **Backend Frameworks:** FastAPI, MongoDB (GridFS).
</key_technical_concepts>

<code_architecture>
The application uses a standard full-stack architecture: React.js frontend and FastAPI/MongoDB backend.



- ****: Main API and logic handler.
    - **Importance**: Contains all primary API routes, social media callbacks, and post publication logic.
    - **Changes Made**:
        - **OAuth Callback ()**: Fully refactored to implement the 3-step token exchange (Short-lived -> Long-lived User Token -> Page Access Token). Strict validation added to ensure the saved token starts with EAA.
        - **Image Serving ( / )**: Created unauthenticated endpoints to stream images directly from GridFS, supporting both JPG and WebP, optimizing headers (Content-Type, Cache-Control, Access-Control-Allow-Origin: *), and handling HEAD requests.
        - **Image Conversion ()**: Extended logic to parse carousel IDs and standard file paths, converting them to the public URL format with the  extension (e.g., ).
        - **Publication ()**: Logic modified to: 1) strictly require a valid EAA token, 2) download the image, 3) convert it to JPG using Pillow, and 4) perform binary upload via  to Facebook's  endpoint.
- ****: Social API Client wrapper.
    - **Changes Made**: Updated functions to use Facebook Graph API v20.0 and implement the complex token exchange methods required for permanent tokens.
- **Image Conversion Libraries**: Pillow was verified to be installed and is used within  for image format conversion during publication.
</code_architecture>

<pending_tasks>
- Fully implement the analytics dashboard for published posts.
- Diagnose and fix carousel deletion (if still present).
- Finalize carousel display logic (grey placeholder instead of first image).
- **CRITICAL**: User must complete the external Facebook Developer App configurations as specified to resolve the OAuth AJAX error and ensure EAA tokens are permanently saved.
</pending_tasks>

<current_work>
The immediate work focused on resolving a critical failure in the OAuth process observed on the LIVE environment: the inability to save permanent EAA tokens despite correct backend implementation of the 3-step OAuth flow and robust image handling. This failure was traced to an intermittent front-end AJAX error () occurring immediately after Facebook redirects to the callback URI. This strongly indicates an external configuration failure in the Facebook Developer App.

The engineer analyzed user-provided screenshots of the Facebook App settings (App ID: 1115451684022643) and identified several missing or incomplete fields.

The last action taken was instructing the user on the precise fixes required in the Facebook Developer Console:
1. Impose HTTPS: Set to **OUI**.
2. Se connecter avec le SDK JavaScript: Set to **OUI**.
3. Domaines autorisés pour le SDK JavaScript: Add .
4. URL de rappel pour les annulations d'autorisation: Add .
5. URL de la demande de suppression des données: Add .

All code-level fixes (EAA token flow, JPG conversion, binary upload) are complete and validated internally. The current blockage is entirely dependent on the user making these external configuration changes.
</current_work>

<optional_next_step>
Wait for user confirmation that the required Facebook Developer App configuration changes have been applied.
</optional_next_step>
