<analysis>
The AI engineer's work primarily involved stabilizing and enhancing the Claire et Marcus PWA, focusing on social media integration and AI post generation. Initially, efforts concentrated on fixing Facebook and Instagram OAuth, migrating to the Instagram Graph API 2025, and troubleshooting persistent redirect URI and scope issues. This included extensive debugging of environment variables () and backend server logic () to align with the live environment and Facebook Login for Business requirements. A major challenge was a phantom posts issue, where the UI displayed posts not present in the database, eventually traced to a misconfigured  pointing to an old external MongoDB. Concurrently, the post generation system in  was refactored to conditionally generate posts based on active social media connections. This involved adding platform-specific logic and prompts. The engineer iteratively debugged generation failures, discovering issues like missing user data and content in the newly pointed local MongoDB. The trajectory concludes with the engineer re-implementing generation logic to strictly adhere to user-defined rules for connected platforms, moving towards robust multi-platform post creation.
</analysis>

<product_requirements>
The Claire et Marcus PWA aims to automate social media content for small businesses, generating Instagram calendars with AI-curated visuals and text. It leverages business profiles, website analysis, user uploads, and notes for tailored content. Core features include post modification, diverse visual attachments, carousel support, and monthly collapsible content sections. Initial user requests focused on fixing Instagram integration, migrating to Facebook Login for Business, managing photos, and using OpenAI GPT-4o with Claude Sonnet 4 as backup for LLM-driven content. UI improvements were also sought, including header fixes, direct access to business profile fields, and a fictitious 90-second website analysis progress bar. The overarching goal is automated publication on Facebook and Instagram, requiring robust social account connectivity. More recently, the user explicitly requested a refined post generation logic: only generate posts if a network is connected, for that specific network; if multiple networks are connected, generate independently for each. Phantom posts displayed in the UI also need resolution.
</product_requirements>

<key_technical_concepts>
- **Full-stack Development**: React.js (Frontend), FastAPI (Backend), MongoDB (Database).
- **LLM Integration**: OpenAI GPT-4o, Anthropic Claude Sonnet 4, intelligent LLM orchestration.
- **Authentication/Authorization**: JWT, OAuth 2.0 (Facebook Login for Business, Instagram Graph API 2025).
- **Data Management**: MongoDB collections, UUIDs, environment variables (), Pydantic.
- **Deployment**: Kubernetes Ingress rules, supervisor, .
- **UI/UX**: Tailwind CSS, React state management, dynamic content rendering.
</key_technical_concepts>

<code_architecture>

-   ****: Main FastAPI application.
    -   **Importance**: Handles all backend routes, including authentication and social media callbacks.
    -   **Changes Made**: Instagram/Facebook OAuth callback logic refined to handle correct redirect URIs, scopes, and  for Facebook Login for Business. Debugging statements and temporary test endpoints (, , ) were added and removed repeatedly to diagnose environment variable propagation and phantom data issues. Endpoints for Facebook and Instagram auth (, ) were separated, and the  for Instagram was integrated. Publication endpoint () was created and iteratively debugged.
-   ****: Manages AI-driven social media post generation.
    -   **Importance**: Orchestrates LLM outputs for tailored social media posts.
    -   **Changes Made**: Heavily modified to include platform-specific generation logic. Initially changed to use  by default and conditionally generate based on . Later, a default  was restored. Logic for , , and  was introduced, modified, removed, and re-introduced to handle multi-platform generation and ensure posts are created for connected accounts. Prompts were updated to be platform-aware.
-   ****: Backend environment variables.
    -   **Importance**: Stores critical configuration, , and Facebook/Instagram credentials.
    -   **Changes Made**:  and  were adjusted multiple times between preview and production URLs.  (e.g., ) was added. Crucially,  was changed from an external MongoDB Atlas cluster to  to use the local Emergent MongoDB instance, resolving phantom post issues.
-   ****: Main React component.
    -   **Importance**: Manages global state, authentication, UI rendering, and user interaction.
    -   **Changes Made**:  and  functions were updated to call distinct backend endpoints.  was implemented to show a confirmation modal and attempt post publication. The rendering logic for posts was updated to display a Publi√© badge conditionally for published posts and a Valider button for unpublished posts, replacing a universal Valider button. Logic for  and the post generation modal was fixed to prevent double popups and correctly reset state.
</code_architecture>

<pending_tasks>
- Investigate the persistent phantom posts in the frontend UI despite database deletions.
- Ensure all newly created backend endpoints are consistently accessible (e.g., for post publication, cache clearing).
- Implement the full scheduling system for automated publications.
- Implement the analytics dashboard for published posts.
- Diagnose and fix the carousel deletion issue (if still present).
- Diagnose and fix the recurring photo modification issue (blue question mark).
- Work with the infrastructure team to resolve any remaining external proxy/cache issue.
- Finalize the carousel display logic (grey placeholder instead of first image).
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer was actively engaged in refining the post generation logic within . The user reported that the generation system was not correctly taking into account connected social networks, generating Instagram posts even when Facebook was connected, and showing 12 phantom posts in the UI.

The engineer identified that previous modifications had inadvertently broken the generation logic by adding a fallback to Instagram or by not properly detecting connected platforms. The core issue was to implement a strict logic for multi-platform post generation:
1.  If no network is connected, show an error popup.
2.  If one network is connected, generate posts only for that network.
3.  If multiple networks are connected, generate posts independently for each.

The engineer has successfully re-implemented this logic, modifying , , and  to detect active Facebook connections, select facebook as the target platform, and adapt AI prompts accordingly. Initial tests confirm the no connection error and single-platform (Facebook) generation now work. The engineer just finished setting up a test for multiple connections by adding an Instagram connection.
</current_work>

<optional_next_step>
Test the multi-platform post generation logic with both Facebook and Instagram connections active.
</optional_next_step>
