#!/usr/bin/env python3
"""
DIAGNOSTIC URGENT - Post Modifi√© Non Affich√© + Date Publication
Test sp√©cifique pour diagnostiquer les probl√®mes de modification de posts identifi√©s par l'utilisateur.

PROBL√àMES RAPPORT√âS:
1. L'utilisateur voit le spinner de modification, mais apr√®s completion, c'est toujours l'ancien post qui s'affiche
2. Les demandes de modification de jour de publication ne semblent pas prises en compte

TESTS CRITIQUES REQUIS:
- Test 1: V√©rification r√©ponse endpoint modification
- Test 2: Test sp√©cifique modification date  
- Test 3: V√©rification format r√©ponse modification
- Test 4: Validation compl√®te post-modification

Credentials: lperpere@yahoo.fr / L@Reunion974!
"""

import requests
import json
import sys
from datetime import datetime, timedelta
import time

# Configuration
BACKEND_URL = "https://insta-automate-3.preview.emergentagent.com/api"
TEST_EMAIL = "lperpere@yahoo.fr"
TEST_PASSWORD = "L@Reunion974!"

class PostModificationDiagnostic:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_id = None
        self.test_post_id = None
        
    def authenticate(self):
        """Authentification avec les credentials fournis"""
        print("üîê √âTAPE 1: Authentification...")
        
        auth_data = {
            "email": TEST_EMAIL,
            "password": TEST_PASSWORD
        }
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login-robust",
                json=auth_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.user_id = data.get("user_id")
                
                # Configure headers for subsequent requests
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}",
                    "Content-Type": "application/json"
                })
                
                print(f"‚úÖ Authentification r√©ussie")
                print(f"   User ID: {self.user_id}")
                print(f"   Token: {self.token[:20]}..." if self.token else "No token")
                return True
            else:
                print(f"‚ùå √âchec authentification: {response.status_code}")
                print(f"   Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur authentification: {str(e)}")
            return False
    
    def get_existing_posts(self):
        """R√©cup√©rer les posts existants pour les tests"""
        print("\nüìã √âTAPE 2: R√©cup√©ration des posts existants...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/posts/generated", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                posts = data.get("posts", [])
                
                print(f"‚úÖ GET /api/posts/generated r√©ussi")
                print(f"   Nombre de posts trouv√©s: {len(posts)}")
                
                if posts:
                    # Prendre le premier post pour les tests
                    test_post = posts[0]
                    self.test_post_id = test_post.get("id")
                    
                    print(f"   Post de test s√©lectionn√©: {self.test_post_id}")
                    print(f"   Titre actuel: {test_post.get('title', 'N/A')}")
                    print(f"   Texte actuel: {test_post.get('text', 'N/A')[:100]}...")
                    print(f"   Date programm√©e: {test_post.get('scheduled_date', 'N/A')}")
                    print(f"   Modified_at: {test_post.get('modified_at', 'N/A')}")
                    
                    return test_post
                else:
                    print("‚ö†Ô∏è Aucun post trouv√© - g√©n√©ration de posts requise")
                    return None
                    
            else:
                print(f"‚ùå √âchec GET posts: {response.status_code}")
                print(f"   Response: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur GET posts: {str(e)}")
            return None
    
    def test_1_endpoint_modification_response(self, original_post):
        """Test 1: V√©rification r√©ponse endpoint modification"""
        print("\nüß™ TEST 1: V√©rification r√©ponse endpoint modification")
        print("=" * 60)
        
        if not self.test_post_id:
            print("‚ùå Pas de post ID disponible pour le test")
            return False, None
        
        # Demande de modification compl√®te comme dans l'exemple
        modification_request = {
            "modification_request": "Change le titre pour 'Nouveau Titre Test Diagnostic' et programme ce post pour le 15 septembre au lieu du 24"
        }
        
        print(f"üì§ Envoi de la demande de modification:")
        print(f"   POST ID: {self.test_post_id}")
        print(f"   Demande: {modification_request['modification_request']}")
        
        try:
            response = self.session.put(
                f"{BACKEND_URL}/posts/{self.test_post_id}/modify",
                json=modification_request,
                timeout=60  # Timeout √©tendu pour l'IA
            )
            
            print(f"üì• R√©ponse re√ßue:")
            print(f"   Status Code: {response.status_code}")
            print(f"   Headers: {dict(response.headers)}")
            
            if response.status_code == 200:
                try:
                    response_data = response.json()
                    print(f"‚úÖ PUT /api/posts/{self.test_post_id}/modify r√©ussi")
                    print(f"üìä ANALYSE COMPLETE DE LA R√âPONSE JSON:")
                    print(json.dumps(response_data, indent=2, ensure_ascii=False))
                    
                    # V√©rifier les champs attendus par le frontend
                    expected_fields = ["new_title", "new_text", "new_hashtags", "modified_at", "scheduled_date"]
                    missing_fields = []
                    present_fields = []
                    
                    for field in expected_fields:
                        if field in response_data:
                            present_fields.append(field)
                            print(f"   ‚úÖ {field}: {response_data[field]}")
                        else:
                            missing_fields.append(field)
                            print(f"   ‚ùå {field}: MANQUANT")
                    
                    # V√©rifier les champs dans modified_post si pr√©sent
                    if "modified_post" in response_data:
                        modified_post = response_data["modified_post"]
                        print(f"üìä CHAMPS DANS modified_post:")
                        for key, value in modified_post.items():
                            print(f"   {key}: {value}")
                    
                    print(f"\nüìã R√âSUM√â CHAMPS R√âPONSE:")
                    print(f"   Champs pr√©sents: {present_fields}")
                    print(f"   Champs manquants: {missing_fields}")
                    
                    # Diagnostic sp√©cifique
                    if missing_fields:
                        print(f"‚ö†Ô∏è PROBL√àME IDENTIFI√â: Champs manquants dans la r√©ponse")
                        print(f"   Le frontend attend: {expected_fields}")
                        print(f"   Mais re√ßoit seulement: {present_fields}")
                        
                        if "scheduled_date" in missing_fields:
                            print(f"üö® CRITIQUE: scheduled_date manquant - explique pourquoi les dates ne sont pas mises √† jour!")
                    
                    return True, response_data
                    
                except json.JSONDecodeError as e:
                    print(f"‚ùå Erreur parsing JSON: {e}")
                    print(f"   Raw response: {response.text}")
                    return False, None
            else:
                print(f"‚ùå √âchec modification: {response.status_code}")
                print(f"   Response: {response.text}")
                return False, None
                
        except Exception as e:
            print(f"‚ùå Erreur modification: {str(e)}")
            return False, None
    
    def test_2_date_modification_specific(self):
        """Test 2: Test sp√©cifique modification date"""
        print("\nüß™ TEST 2: Test sp√©cifique modification date")
        print("=" * 60)
        
        if not self.test_post_id:
            print("‚ùå Pas de post ID disponible pour le test")
            return False, None
        
        # Demande centr√©e uniquement sur la date
        date_modification_request = {
            "modification_request": "Change la date de publication pour le 20 septembre 2025 √† 14h00"
        }
        
        print(f"üì§ Envoi de la demande de modification de date:")
        print(f"   POST ID: {self.test_post_id}")
        print(f"   Demande: {date_modification_request['modification_request']}")
        
        try:
            response = self.session.put(
                f"{BACKEND_URL}/posts/{self.test_post_id}/modify",
                json=date_modification_request,
                timeout=60
            )
            
            print(f"üì• R√©ponse re√ßue:")
            print(f"   Status Code: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    response_data = response.json()
                    print(f"‚úÖ Modification de date r√©ussie")
                    print(f"üìä R√âPONSE COMPL√àTE:")
                    print(json.dumps(response_data, indent=2, ensure_ascii=False))
                    
                    # V√©rifier si l'IA GPT-4 peut identifier et traiter les dates
                    if "modified_post" in response_data:
                        modified_post = response_data["modified_post"]
                        
                        # Chercher des indices de traitement de date
                        text_content = modified_post.get("text", "")
                        title_content = modified_post.get("title", "")
                        
                        date_keywords = ["20 septembre", "septembre 2025", "14h00", "14:00", "date", "programm√©"]
                        date_found_in_content = any(keyword.lower() in text_content.lower() or keyword.lower() in title_content.lower() for keyword in date_keywords)
                        
                        print(f"üîç ANALYSE TRAITEMENT DATE PAR IA:")
                        print(f"   Date trouv√©e dans le contenu: {date_found_in_content}")
                        print(f"   Texte modifi√©: {text_content[:200]}...")
                        
                        if date_found_in_content:
                            print(f"‚úÖ L'IA GPT-4 a identifi√© et trait√© la demande de date")
                        else:
                            print(f"‚ùå L'IA GPT-4 n'a pas trait√© la demande de date dans le contenu")
                    
                    # V√©rifier si scheduled_date est retourn√©
                    if "scheduled_date" in response_data:
                        print(f"‚úÖ scheduled_date pr√©sent dans la r√©ponse: {response_data['scheduled_date']}")
                    else:
                        print(f"‚ùå scheduled_date MANQUANT dans la r√©ponse - PROBL√àME CRITIQUE!")
                    
                    return True, response_data
                    
                except json.JSONDecodeError as e:
                    print(f"‚ùå Erreur parsing JSON: {e}")
                    return False, None
            else:
                print(f"‚ùå √âchec modification date: {response.status_code}")
                print(f"   Response: {response.text}")
                return False, None
                
        except Exception as e:
            print(f"‚ùå Erreur modification date: {str(e)}")
            return False, None
    
    def test_3_response_format_verification(self):
        """Test 3: V√©rification format r√©ponse modification"""
        print("\nüß™ TEST 3: V√©rification format r√©ponse modification")
        print("=" * 60)
        
        if not self.test_post_id:
            print("‚ùå Pas de post ID disponible pour le test")
            return False, None
        
        # Test avec une modification simple pour analyser le format
        simple_modification = {
            "modification_request": "Ajoute un emoji üéØ au d√©but du titre"
        }
        
        print(f"üì§ Test de format avec modification simple:")
        print(f"   Demande: {simple_modification['modification_request']}")
        
        try:
            response = self.session.put(
                f"{BACKEND_URL}/posts/{self.test_post_id}/modify",
                json=simple_modification,
                timeout=60
            )
            
            if response.status_code == 200:
                response_data = response.json()
                
                print(f"‚úÖ Modification simple r√©ussie")
                print(f"üìä ANALYSE EXACTE DES CHAMPS RETOURN√âS:")
                
                # Analyser chaque champ de la r√©ponse
                for key, value in response_data.items():
                    print(f"   {key}: {type(value).__name__} = {value}")
                
                # Comparer avec ce que le frontend attend
                frontend_expected = {
                    "new_title": "response.data.new_title",
                    "new_text": "response.data.new_text", 
                    "new_hashtags": "response.data.new_hashtags",
                    "modified_at": "response.data.modified_at",
                    "scheduled_date": "response.data.scheduled_date"
                }
                
                print(f"\nüîç COMPARAISON AVEC ATTENTES FRONTEND:")
                mapping_issues = []
                
                for frontend_field, frontend_path in frontend_expected.items():
                    if frontend_field in response_data:
                        print(f"   ‚úÖ {frontend_field} ‚Üí {frontend_path} : DISPONIBLE")
                    else:
                        print(f"   ‚ùå {frontend_field} ‚Üí {frontend_path} : MANQUANT")
                        mapping_issues.append(frontend_field)
                
                # V√©rifier si les donn√©es sont dans modified_post
                if "modified_post" in response_data and mapping_issues:
                    print(f"\nüîç V√âRIFICATION DANS modified_post:")
                    modified_post = response_data["modified_post"]
                    
                    for missing_field in mapping_issues:
                        # Mapper les champs
                        mapped_field = missing_field.replace("new_", "")
                        if mapped_field in modified_post:
                            print(f"   ‚ÑπÔ∏è {missing_field} trouv√© comme '{mapped_field}' dans modified_post")
                        else:
                            print(f"   ‚ùå {missing_field} introuvable m√™me dans modified_post")
                
                if mapping_issues:
                    print(f"\nüö® PROBL√àME MAPPING FRONTEND IDENTIFI√â:")
                    print(f"   Champs manquants: {mapping_issues}")
                    print(f"   Le frontend ne peut pas acc√©der √† ces donn√©es!")
                    
                    if "scheduled_date" in mapping_issues:
                        print(f"   üéØ CAUSE PROBABLE: scheduled_date manquant explique pourquoi les dates ne se mettent pas √† jour!")
                
                return True, response_data
                
            else:
                print(f"‚ùå √âchec test format: {response.status_code}")
                return False, None
                
        except Exception as e:
            print(f"‚ùå Erreur test format: {str(e)}")
            return False, None
    
    def test_4_complete_post_modification_validation(self):
        """Test 4: Validation compl√®te post-modification"""
        print("\nüß™ TEST 4: Validation compl√®te post-modification")
        print("=" * 60)
        
        if not self.test_post_id:
            print("‚ùå Pas de post ID disponible pour le test")
            return False
        
        # R√©cup√©rer l'√©tat du post AVANT modification
        print("üìã R√©cup√©ration √©tat AVANT modification...")
        try:
            response_before = self.session.get(f"{BACKEND_URL}/posts/generated", timeout=30)
            if response_before.status_code == 200:
                posts_before = response_before.json().get("posts", [])
                post_before = next((p for p in posts_before if p.get("id") == self.test_post_id), None)
                
                if post_before:
                    print(f"‚úÖ √âtat AVANT r√©cup√©r√©:")
                    print(f"   Titre: {post_before.get('title', 'N/A')}")
                    print(f"   Texte: {post_before.get('text', 'N/A')[:100]}...")
                    print(f"   Hashtags: {post_before.get('hashtags', [])}")
                    print(f"   Date programm√©e: {post_before.get('scheduled_date', 'N/A')}")
                    print(f"   Modified_at: {post_before.get('modified_at', 'N/A')}")
                else:
                    print("‚ùå Post non trouv√© dans la liste")
                    return False
            else:
                print("‚ùå Impossible de r√©cup√©rer l'√©tat avant")
                return False
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration avant: {str(e)}")
            return False
        
        # Effectuer une modification compl√®te
        complete_modification = {
            "modification_request": "Change le titre pour 'Test Validation Compl√®te', modifie le texte pour parler de validation, et programme pour le 25 septembre 2025"
        }
        
        print(f"\nüì§ Modification compl√®te:")
        print(f"   Demande: {complete_modification['modification_request']}")
        
        try:
            # Effectuer la modification
            response_modify = self.session.put(
                f"{BACKEND_URL}/posts/{self.test_post_id}/modify",
                json=complete_modification,
                timeout=60
            )
            
            if response_modify.status_code == 200:
                modify_data = response_modify.json()
                print(f"‚úÖ Modification effectu√©e avec succ√®s")
                
                # Attendre un peu pour la persistance
                time.sleep(2)
                
                # R√©cup√©rer l'√©tat APR√àS modification
                print(f"\nüìã V√©rification √©tat APR√àS modification...")
                response_after = self.session.get(f"{BACKEND_URL}/posts/generated", timeout=30)
                
                if response_after.status_code == 200:
                    posts_after = response_after.json().get("posts", [])
                    post_after = next((p for p in posts_after if p.get("id") == self.test_post_id), None)
                    
                    if post_after:
                        print(f"‚úÖ √âtat APR√àS r√©cup√©r√©:")
                        print(f"   Titre: {post_after.get('title', 'N/A')}")
                        print(f"   Texte: {post_after.get('text', 'N/A')[:100]}...")
                        print(f"   Hashtags: {post_after.get('hashtags', [])}")
                        print(f"   Date programm√©e: {post_after.get('scheduled_date', 'N/A')}")
                        print(f"   Modified_at: {post_after.get('modified_at', 'N/A')}")
                        
                        # VALIDATION CRITIQUE: Comparer avant/apr√®s
                        print(f"\nüîç VALIDATION PERSISTANCE:")
                        
                        changes_detected = []
                        
                        # V√©rifier le titre
                        if post_before.get('title') != post_after.get('title'):
                            changes_detected.append("titre")
                            print(f"   ‚úÖ Titre modifi√©: '{post_before.get('title')}' ‚Üí '{post_after.get('title')}'")
                        else:
                            print(f"   ‚ùå Titre INCHANG√â: '{post_after.get('title')}'")
                        
                        # V√©rifier le texte
                        if post_before.get('text') != post_after.get('text'):
                            changes_detected.append("texte")
                            print(f"   ‚úÖ Texte modifi√©")
                        else:
                            print(f"   ‚ùå Texte INCHANG√â")
                        
                        # V√©rifier les hashtags
                        if post_before.get('hashtags') != post_after.get('hashtags'):
                            changes_detected.append("hashtags")
                            print(f"   ‚úÖ Hashtags modifi√©s")
                        else:
                            print(f"   ‚ùå Hashtags INCHANG√âS")
                        
                        # V√©rifier la date programm√©e
                        if post_before.get('scheduled_date') != post_after.get('scheduled_date'):
                            changes_detected.append("scheduled_date")
                            print(f"   ‚úÖ Date programm√©e modifi√©e: '{post_before.get('scheduled_date')}' ‚Üí '{post_after.get('scheduled_date')}'")
                        else:
                            print(f"   ‚ùå Date programm√©e INCHANG√âE: '{post_after.get('scheduled_date')}'")
                        
                        # V√©rifier modified_at
                        if post_before.get('modified_at') != post_after.get('modified_at'):
                            changes_detected.append("modified_at")
                            print(f"   ‚úÖ Modified_at mis √† jour: '{post_before.get('modified_at')}' ‚Üí '{post_after.get('modified_at')}'")
                        else:
                            print(f"   ‚ùå Modified_at INCHANG√â: '{post_after.get('modified_at')}'")
                        
                        # DIAGNOSTIC FINAL
                        print(f"\nüìä R√âSULTAT VALIDATION:")
                        print(f"   Champs modifi√©s: {changes_detected}")
                        print(f"   Nombre de changements: {len(changes_detected)}")
                        
                        if len(changes_detected) >= 3:  # Au moins titre, texte, modified_at
                            print(f"‚úÖ VALIDATION R√âUSSIE: Le post a bien √©t√© modifi√© et persist√©")
                            return True
                        else:
                            print(f"‚ùå VALIDATION √âCHOU√âE: Modifications insuffisantes d√©tect√©es")
                            print(f"üö® PROBL√àME: Le post n'est pas correctement mis √† jour en base!")
                            return False
                    else:
                        print("‚ùå Post non trouv√© apr√®s modification")
                        return False
                else:
                    print("‚ùå Impossible de r√©cup√©rer l'√©tat apr√®s modification")
                    return False
            else:
                print(f"‚ùå √âchec modification compl√®te: {response_modify.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur validation compl√®te: {str(e)}")
            return False
    
    def run_diagnostic(self):
        """Ex√©cuter le diagnostic complet"""
        print("=" * 80)
        print("üö® DIAGNOSTIC URGENT - Post Modifi√© Non Affich√© + Date Publication")
        print("=" * 80)
        print(f"Backend URL: {BACKEND_URL}")
        print(f"Credentials: {TEST_EMAIL} / {TEST_PASSWORD}")
        print(f"Timestamp: {datetime.now().isoformat()}")
        print("\nPROBL√àMES RAPPORT√âS:")
        print("1. Spinner de modification visible mais ancien post affich√© apr√®s")
        print("2. Demandes de modification de date non prises en compte")
        print("=" * 80)
        
        # √âtape 1: Authentification
        if not self.authenticate():
            print("\n‚ùå DIAGNOSTIC √âCHOU√â: Impossible de s'authentifier")
            return False
        
        # √âtape 2: R√©cup√©rer posts existants
        original_post = self.get_existing_posts()
        if not original_post:
            print("\n‚ùå DIAGNOSTIC √âCHOU√â: Aucun post disponible pour les tests")
            return False
        
        # Tests critiques
        test_results = {}
        
        # Test 1: V√©rification r√©ponse endpoint
        print(f"\n" + "="*80)
        test_1_success, test_1_data = self.test_1_endpoint_modification_response(original_post)
        test_results["test_1"] = test_1_success
        
        # Test 2: Test sp√©cifique modification date
        print(f"\n" + "="*80)
        test_2_success, test_2_data = self.test_2_date_modification_specific()
        test_results["test_2"] = test_2_success
        
        # Test 3: V√©rification format r√©ponse
        print(f"\n" + "="*80)
        test_3_success, test_3_data = self.test_3_response_format_verification()
        test_results["test_3"] = test_3_success
        
        # Test 4: Validation compl√®te post-modification
        print(f"\n" + "="*80)
        test_4_success = self.test_4_complete_post_modification_validation()
        test_results["test_4"] = test_4_success
        
        # R√©sum√© final du diagnostic
        print("\n" + "=" * 80)
        print("üìã R√âSUM√â DIAGNOSTIC COMPLET")
        print("=" * 80)
        
        total_tests = len(test_results)
        passed_tests = sum(test_results.values())
        
        print(f"Tests r√©ussis: {passed_tests}/{total_tests}")
        
        for test_name, result in test_results.items():
            status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
            print(f"   {test_name}: {status}")
        
        # Diagnostic des probl√®mes
        print(f"\nüîç ANALYSE DES PROBL√àMES IDENTIFI√âS:")
        
        if not test_results.get("test_1", False):
            print("‚ùå PROBL√àME 1: R√©ponse endpoint modification incompl√®te")
            print("   ‚Üí Champs manquants dans la r√©ponse (new_title, new_text, etc.)")
        
        if not test_results.get("test_2", False):
            print("‚ùå PROBL√àME 2: IA ne traite pas les dates correctement")
            print("   ‚Üí Prompt insuffisant pour modifier les dates")
        
        if not test_results.get("test_3", False):
            print("‚ùå PROBL√àME 3: Format r√©ponse incompatible avec frontend")
            print("   ‚Üí Frontend ne peut pas mapper les champs de r√©ponse")
        
        if not test_results.get("test_4", False):
            print("‚ùå PROBL√àME 4: Modifications non persist√©es en base")
            print("   ‚Üí Les changements ne sont pas sauvegard√©s correctement")
        
        # Recommandations
        print(f"\nüí° RECOMMANDATIONS:")
        
        if passed_tests == total_tests:
            print("‚úÖ Tous les tests sont pass√©s - le syst√®me fonctionne correctement")
            print("   Le probl√®me pourrait venir du frontend ou du cache")
        else:
            print("üîß CORRECTIONS REQUISES:")
            print("1. Ajouter les champs manquants dans la r√©ponse de l'endpoint")
            print("2. Am√©liorer le prompt IA pour traiter les dates")
            print("3. V√©rifier la persistance en base de donn√©es")
            print("4. Synchroniser le format de r√©ponse avec les attentes frontend")
        
        return passed_tests == total_tests

def main():
    """Point d'entr√©e principal"""
    diagnostic = PostModificationDiagnostic()
    success = diagnostic.run_diagnostic()
    
    if success:
        print("\nüéâ DIAGNOSTIC TERMIN√â AVEC SUCC√àS")
        print("‚úÖ Le syst√®me de modification de posts fonctionne correctement")
        sys.exit(0)
    else:
        print("\nüí• DIAGNOSTIC R√âV√àLE DES PROBL√àMES CRITIQUES")
        print("‚ùå Des corrections sont n√©cessaires pour r√©soudre les probl√®mes utilisateur")
        sys.exit(1)

if __name__ == "__main__":
    main()