#!/usr/bin/env python3
"""
Test urgent du d√©placement de post calendrier
Test de l'endpoint PUT /api/posts/move-calendar-post/{post_id}
"""

import requests
import json
import sys
from datetime import datetime

class CalendarMoveTest:
    def __init__(self):
        self.base_url = "https://post-validator.preview.emergentagent.com/api"
        self.session = requests.Session()
        self.token = None
        self.user_id = None
        
    def authenticate(self, email, password):
        """Authentification avec l'API"""
        try:
            print(f"üîê Step 1: Authentification avec {email}")
            
            response = self.session.post(
                f"{self.base_url}/auth/login-robust",
                json={"email": email, "password": password},
                headers={"Content-Type": "application/json"}
            )
            
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.user_id = data.get("user_id")
                
                # Set authorization header for all future requests
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}",
                    "Content-Type": "application/json"
                })
                
                print(f"   ‚úÖ Authentification r√©ussie")
                print(f"   User ID: {self.user_id}")
                print(f"   Token: {self.token[:30]}..." if self.token else "   Token: None")
                return True
            else:
                print(f"   ‚ùå √âchec authentification: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur authentification: {str(e)}")
            return False
    
    def get_calendar_posts(self):
        """R√©cup√©rer les posts du calendrier"""
        try:
            print(f"\nüìÖ Step 2: R√©cup√©ration des posts calendrier")
            
            response = self.session.get(f"{self.base_url}/calendar/posts")
            
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                posts = data.get("posts", [])
                count = data.get("count", 0)
                
                print(f"   ‚úÖ {count} posts calendrier trouv√©s")
                
                if posts:
                    print(f"   Premier post ID: {posts[0].get('id')}")
                    print(f"   Date actuelle: {posts[0].get('scheduled_date')}")
                    print(f"   Titre: {posts[0].get('title', 'Sans titre')}")
                    return posts
                else:
                    print(f"   ‚ö†Ô∏è Aucun post calendrier disponible")
                    return []
            else:
                print(f"   ‚ùå Erreur r√©cup√©ration posts: {response.text}")
                return []
                
        except Exception as e:
            print(f"   ‚ùå Erreur r√©cup√©ration posts: {str(e)}")
            return []
    
    def test_move_calendar_post(self, post_id, new_date):
        """Tester le d√©placement d'un post calendrier"""
        try:
            print(f"\nüîÑ Step 3: Test d√©placement post {post_id}")
            print(f"   Nouvelle date: {new_date}")
            
            response = self.session.put(
                f"{self.base_url}/posts/move-calendar-post/{post_id}",
                json={"scheduled_date": new_date}
            )
            
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text}")
            
            if response.status_code == 200:
                data = response.json()
                success = data.get("success", False)
                message = data.get("message", "")
                
                if success:
                    print(f"   ‚úÖ D√©placement r√©ussi: {message}")
                    return True
                else:
                    print(f"   ‚ùå D√©placement √©chou√©: {message}")
                    return False
            else:
                print(f"   ‚ùå Erreur HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur d√©placement: {str(e)}")
            return False
    
    def verify_post_moved(self, post_id, expected_date):
        """V√©rifier que le post a bien √©t√© d√©plac√©"""
        try:
            print(f"\n‚úÖ Step 4: V√©rification du d√©placement")
            
            # R√©cup√©rer √† nouveau les posts calendrier
            posts = self.get_calendar_posts()
            
            # Trouver le post modifi√©
            moved_post = None
            for post in posts:
                if post.get("id") == post_id:
                    moved_post = post
                    break
            
            if moved_post:
                actual_date = moved_post.get("scheduled_date", "")
                print(f"   Date attendue: {expected_date}")
                print(f"   Date actuelle: {actual_date}")
                
                if actual_date == expected_date:
                    print(f"   ‚úÖ V√©rification r√©ussie - Date mise √† jour correctement")
                    return True
                else:
                    print(f"   ‚ùå V√©rification √©chou√©e - Date non mise √† jour")
                    return False
            else:
                print(f"   ‚ùå Post {post_id} non trouv√© apr√®s d√©placement")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur v√©rification: {str(e)}")
            return False
    
    def check_backend_logs(self):
        """V√©rifier les logs backend (simulation)"""
        try:
            print(f"\nüìã Step 5: V√©rification logs backend")
            
            # Test de sant√© de l'API pour v√©rifier la connectivit√©
            response = self.session.get(f"{self.base_url}/health")
            
            if response.status_code == 200:
                print(f"   ‚úÖ Backend accessible et fonctionnel")
                return True
            else:
                print(f"   ‚ùå Backend non accessible: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur v√©rification backend: {str(e)}")
            return False
    
    def run_comprehensive_test(self):
        """Ex√©cuter le test complet"""
        print("üéØ TEST URGENT - D√âPLACEMENT POST CALENDRIER")
        print("=" * 60)
        
        # Authentification
        if not self.authenticate("lperpere@yahoo.fr", "L@Reunion974!"):
            print("\n‚ùå √âCHEC: Impossible de s'authentifier")
            return False
        
        # R√©cup√©rer les posts calendrier
        posts = self.get_calendar_posts()
        if not posts:
            print("\n‚ùå √âCHEC: Aucun post calendrier disponible pour le test")
            return False
        
        # Utiliser le premier post disponible
        test_post = posts[0]
        post_id = test_post.get("id")
        current_date = test_post.get("scheduled_date", "")
        
        print(f"\nüéØ Post de test s√©lectionn√©:")
        print(f"   ID: {post_id}")
        print(f"   Date actuelle: {current_date}")
        print(f"   Titre: {test_post.get('title', 'Sans titre')}")
        
        # Date de test sp√©cifi√©e dans la demande
        new_date = "2025-09-27T11:00:00.000Z"
        
        # Tester le d√©placement
        if not self.test_move_calendar_post(post_id, new_date):
            print(f"\n‚ùå √âCHEC: D√©placement du post √©chou√©")
            return False
        
        # V√©rifier que le d√©placement a fonctionn√©
        if not self.verify_post_moved(post_id, new_date):
            print(f"\n‚ùå √âCHEC: V√©rification du d√©placement √©chou√©e")
            return False
        
        # V√©rifier les logs backend
        if not self.check_backend_logs():
            print(f"\n‚ö†Ô∏è ATTENTION: Probl√®me potentiel avec le backend")
        
        print(f"\nüéâ SUCC√àS: Test de d√©placement post calendrier r√©ussi!")
        return True

def main():
    """Fonction principale"""
    tester = CalendarMoveTest()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print(f"\n‚úÖ R√âSULTAT: Endpoint de d√©placement calendrier FONCTIONNEL")
            sys.exit(0)
        else:
            print(f"\n‚ùå R√âSULTAT: Endpoint de d√©placement calendrier D√âFAILLANT")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è Test interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()