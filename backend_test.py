#!/usr/bin/env python3
"""
TRACER OAUTH FACEBOOK EN TEMPS R√âEL - IDENTIFIER √âCHEC TOKENS EAA
Backend testing script for Facebook OAuth callback diagnostic

Objectif: Identifier exactement √† quel moment √©choue l'enregistrement des tokens EAA 
lors du flow OAuth Facebook avec surveillance en temps r√©el des logs.

Identifiants: lperpere@yahoo.fr / L@Reunion974!
"""

import requests
import json
import time
import os
from datetime import datetime

# Configuration
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://social-publisher-10.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# Test credentials
TEST_EMAIL = "lperpere@yahoo.fr"
TEST_PASSWORD = "L@Reunion974!"

class FacebookOAuthDiagnostic:
    def __init__(self):
        self.session = requests.Session()
        self.user_id = None
        self.access_token = None
        self.test_results = []
        
    def log_test(self, test_name, success, details=""):
        """Log test results"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        timestamp = datetime.now().strftime("%H:%M:%S")
        result = f"[{timestamp}] {status} {test_name}"
        if details:
            result += f" - {details}"
        print(result)
        self.test_results.append({
            'test': test_name,
            'success': success,
            'details': details,
            'timestamp': timestamp
        })
        
    def authenticate(self):
        """Step 1: Authenticate user"""
        print("\nüîê √âTAPE PR√âLIMINAIRE: Authentification utilisateur")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login-robust", 
                json={"email": TEST_EMAIL, "password": TEST_PASSWORD})
            
            if response.status_code == 200:
                data = response.json()
                self.access_token = data.get('access_token')
                self.user_id = data.get('user_id')
                self.session.headers.update({
                    'Authorization': f'Bearer {self.access_token}'
                })
                self.log_test("Authentication", True, f"User ID: {self.user_id}")
                return True
            else:
                self.log_test("Authentication", False, f"Status: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Authentication", False, f"Error: {str(e)}")
            return False
    
    def test_facebook_auth_url_generation(self):
        """Test 1: V√©rifier g√©n√©ration URL OAuth Facebook"""
        print("\nüîó TEST 1: G√©n√©ration URL OAuth Facebook")
        
        try:
            response = self.session.get(f"{API_BASE}/social/facebook/auth-url")
            
            if response.status_code == 200:
                data = response.json()
                auth_url = data.get('auth_url', '')
                
                # V√©rifier les param√®tres critiques
                required_params = [
                    'client_id=1115451684022643',
                    'config_id=1878388119742903', 
                    'redirect_uri=https://claire-marcus.com/api/social/facebook/callback',
                    'response_type=code',
                    'scope=pages_show_list,pages_read_engagement,pages_manage_posts'
                ]
                
                all_params_present = all(param in auth_url for param in required_params)
                
                if all_params_present:
                    self.log_test("Facebook Auth URL Generation", True, 
                                f"URL correcte avec tous param√®tres requis")
                    print(f"   üìã URL g√©n√©r√©e: {auth_url[:100]}...")
                    return auth_url
                else:
                    missing = [p for p in required_params if p not in auth_url]
                    self.log_test("Facebook Auth URL Generation", False, 
                                f"Param√®tres manquants: {missing}")
                    return None
            else:
                self.log_test("Facebook Auth URL Generation", False, 
                            f"Status: {response.status_code}")
                return None
                
        except Exception as e:
            self.log_test("Facebook Auth URL Generation", False, f"Error: {str(e)}")
            return None
    
    def test_callback_endpoint_accessibility(self):
        """Test 2: V√©rifier accessibilit√© du callback"""
        print("\nüîÑ TEST 2: Accessibilit√© endpoint callback")
        
        callback_url = "https://claire-marcus.com/api/social/facebook/callback"
        
        try:
            # Test avec param√®tres simul√©s
            test_params = {
                'code': 'test_code_simulation',
                'state': f'facebook_oauth|{self.user_id}'
            }
            
            response = requests.get(callback_url, params=test_params, timeout=10)
            
            # Le callback devrait r√©pondre (m√™me avec erreur de token)
            if response.status_code in [200, 302, 400, 401]:
                self.log_test("Callback Endpoint Accessibility", True, 
                            f"Endpoint accessible (Status: {response.status_code})")
                return True
            else:
                self.log_test("Callback Endpoint Accessibility", False, 
                            f"Status inattendu: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Callback Endpoint Accessibility", False, f"Error: {str(e)}")
            return False
    
    def test_facebook_environment_variables(self):
        """Test 3: V√©rifier variables d'environnement Facebook"""
        print("\n‚öôÔ∏è TEST 3: Variables d'environnement Facebook")
        
        try:
            # Test indirect via l'URL OAuth g√©n√©r√©e
            response = self.session.get(f"{API_BASE}/social/facebook/auth-url")
            
            if response.status_code == 200:
                data = response.json()
                auth_url = data.get('auth_url', '')
                
                # Extraire et v√©rifier les variables
                checks = {
                    'FACEBOOK_APP_ID': '1115451684022643' in auth_url,
                    'FACEBOOK_REDIRECT_URI': 'claire-marcus.com/api/social/facebook/callback' in auth_url,
                    'CONFIG_ID': '1878388119742903' in auth_url
                }
                
                all_vars_ok = all(checks.values())
                
                if all_vars_ok:
                    self.log_test("Facebook Environment Variables", True, 
                                "Toutes les variables critiques pr√©sentes")
                    return True
                else:
                    failed_vars = [var for var, ok in checks.items() if not ok]
                    self.log_test("Facebook Environment Variables", False, 
                                f"Variables manquantes/incorrectes: {failed_vars}")
                    return False
            else:
                self.log_test("Facebook Environment Variables", False, 
                            "Impossible de v√©rifier via auth-url")
                return False
                
        except Exception as e:
            self.log_test("Facebook Environment Variables", False, f"Error: {str(e)}")
            return False
    
    def test_current_social_connections(self):
        """Test 4: Analyser connexions sociales actuelles"""
        print("\nüìä TEST 4: Analyse connexions sociales actuelles")
        
        try:
            # Test endpoint de diagnostic
            response = self.session.get(f"{API_BASE}/debug/social-connections")
            
            if response.status_code == 200:
                data = response.json()
                
                # Analyser les connexions
                total_connections = data.get('total_connections', 0)
                active_connections = data.get('active_connections', 0)
                facebook_connections = data.get('facebook_connections', 0)
                
                print(f"   üìà Connexions totales: {total_connections}")
                print(f"   ‚úÖ Connexions actives: {active_connections}")
                print(f"   üìò Connexions Facebook: {facebook_connections}")
                
                # V√©rifier les tokens
                connections_detail = data.get('connections_detail', [])
                temp_tokens = [c for c in connections_detail if 'temp_' in str(c.get('access_token', ''))]
                
                if temp_tokens:
                    print(f"   ‚ö†Ô∏è Tokens temporaires d√©tect√©s: {len(temp_tokens)}")
                    for token_info in temp_tokens:
                        print(f"      - {token_info.get('platform')}: {token_info.get('access_token', '')[:30]}...")
                
                self.log_test("Current Social Connections Analysis", True, 
                            f"Total: {total_connections}, Actives: {active_connections}, Facebook: {facebook_connections}")
                
                return {
                    'total': total_connections,
                    'active': active_connections,
                    'facebook': facebook_connections,
                    'temp_tokens': len(temp_tokens)
                }
            else:
                self.log_test("Current Social Connections Analysis", False, 
                            f"Status: {response.status_code}")
                return None
                
        except Exception as e:
            self.log_test("Current Social Connections Analysis", False, f"Error: {str(e)}")
            return None
    
    def simulate_callback_flow_steps(self):
        """Test 5: Simuler les √©tapes du callback OAuth"""
        print("\nüîÑ TEST 5: Simulation flow callback OAuth 3-√©tapes")
        
        # √âTAPE 1: Code ‚Üí Short-lived token
        print("   üìù √âTAPE 1/3: Code d'autorisation ‚Üí Token court terme")
        try:
            # Simuler un appel callback avec code
            callback_data = {
                'code': 'AQD_simulated_auth_code_for_testing',
                'state': f'facebook_oauth|{self.user_id}'
            }
            
            # Note: Ceci va √©chouer mais nous permet de voir les logs
            callback_url = "https://claire-marcus.com/api/social/facebook/callback"
            response = requests.get(callback_url, params=callback_data, timeout=15)
            
            print(f"      Status: {response.status_code}")
            if response.status_code == 302:
                location = response.headers.get('Location', '')
                if 'facebook_success=true' in location:
                    print("      ‚úÖ Redirection de succ√®s d√©tect√©e")
                elif 'facebook_error' in location:
                    print("      ‚ùå Redirection d'erreur d√©tect√©e")
                    print(f"      üìç Location: {location}")
            
            self.log_test("OAuth Callback Step 1 Simulation", True, 
                        f"Callback test√© (Status: {response.status_code})")
            
        except Exception as e:
            self.log_test("OAuth Callback Step 1 Simulation", False, f"Error: {str(e)}")
        
        # √âTAPE 2: V√©rifier si des tokens long terme sont cr√©√©s
        print("   üìù √âTAPE 2/3: V√©rification tokens long terme")
        try:
            # Re-v√©rifier les connexions apr√®s simulation
            response = self.session.get(f"{API_BASE}/debug/social-connections")
            if response.status_code == 200:
                data = response.json()
                connections = data.get('connections_detail', [])
                
                long_lived_tokens = [c for c in connections 
                                   if c.get('access_token') and 
                                   not c.get('access_token', '').startswith('temp_')]
                
                if long_lived_tokens:
                    print(f"      ‚úÖ Tokens long terme trouv√©s: {len(long_lived_tokens)}")
                    self.log_test("OAuth Long-lived Token Check", True, 
                                f"{len(long_lived_tokens)} tokens long terme")
                else:
                    print("      ‚ùå Aucun token long terme trouv√©")
                    self.log_test("OAuth Long-lived Token Check", False, 
                                "Pas de tokens long terme")
            
        except Exception as e:
            self.log_test("OAuth Long-lived Token Check", False, f"Error: {str(e)}")
        
        # √âTAPE 3: V√©rifier tokens EAA (Page Access Token)
        print("   üìù √âTAPE 3/3: V√©rification tokens EAA permanents")
        try:
            response = self.session.get(f"{API_BASE}/debug/social-connections")
            if response.status_code == 200:
                data = response.json()
                connections = data.get('connections_detail', [])
                
                eaa_tokens = [c for c in connections 
                            if c.get('access_token') and 
                            c.get('access_token', '').startswith('EAA')]
                
                if eaa_tokens:
                    print(f"      ‚úÖ Tokens EAA trouv√©s: {len(eaa_tokens)}")
                    for eaa in eaa_tokens:
                        print(f"         - Page: {eaa.get('page_name', 'Unknown')}")
                        print(f"         - Token: {eaa.get('access_token', '')[:20]}...")
                    self.log_test("OAuth EAA Token Check", True, 
                                f"{len(eaa_tokens)} tokens EAA permanents")
                else:
                    print("      ‚ùå Aucun token EAA permanent trouv√©")
                    self.log_test("OAuth EAA Token Check", False, 
                                "Pas de tokens EAA permanents")
            
        except Exception as e:
            self.log_test("OAuth EAA Token Check", False, f"Error: {str(e)}")
    
    def test_publication_with_current_tokens(self):
        """Test 6: Tester publication avec tokens actuels"""
        print("\nüì§ TEST 6: Test publication avec tokens actuels")
        
        try:
            # D'abord, obtenir un post Facebook pour tester
            response = self.session.get(f"{API_BASE}/posts/generated")
            
            if response.status_code == 200:
                posts = response.json().get('posts', [])
                facebook_posts = [p for p in posts if p.get('platform') == 'facebook']
                
                if facebook_posts:
                    test_post = facebook_posts[0]
                    post_id = test_post.get('id')
                    
                    print(f"   üìù Test avec post: {test_post.get('title', 'Sans titre')}")
                    
                    # Tenter la publication
                    pub_response = self.session.post(f"{API_BASE}/posts/publish", 
                                                   json={'post_id': post_id})
                    
                    print(f"   üìä Status publication: {pub_response.status_code}")
                    
                    if pub_response.status_code == 200:
                        pub_data = pub_response.json()
                        print(f"   ‚úÖ Publication r√©ussie: {pub_data.get('message', '')}")
                        self.log_test("Publication Test", True, "Publication r√©ussie")
                    else:
                        try:
                            error_data = pub_response.json()
                            error_msg = error_data.get('error', 'Erreur inconnue')
                            print(f"   ‚ùå Erreur publication: {error_msg}")
                            
                            # Analyser le type d'erreur
                            if 'token' in error_msg.lower():
                                print("   üîç DIAGNOSTIC: Probl√®me de token d√©tect√©")
                            elif 'connexion' in error_msg.lower():
                                print("   üîç DIAGNOSTIC: Probl√®me de connexion d√©tect√©")
                            
                            self.log_test("Publication Test", False, error_msg)
                        except:
                            self.log_test("Publication Test", False, 
                                        f"Status {pub_response.status_code}")
                else:
                    self.log_test("Publication Test", False, "Aucun post Facebook disponible")
            else:
                self.log_test("Publication Test", False, "Impossible de r√©cup√©rer les posts")
                
        except Exception as e:
            self.log_test("Publication Test", False, f"Error: {str(e)}")
    
    def cleanup_temporary_tokens(self):
        """Test 7: Nettoyer les tokens temporaires"""
        print("\nüßπ TEST 7: Nettoyage tokens temporaires")
        
        try:
            response = self.session.post(f"{API_BASE}/debug/clean-invalid-tokens")
            
            if response.status_code == 200:
                data = response.json()
                deleted_count = data.get('deleted_connections', 0)
                
                if deleted_count > 0:
                    print(f"   ‚úÖ Tokens temporaires supprim√©s: {deleted_count}")
                    self.log_test("Temporary Token Cleanup", True, 
                                f"{deleted_count} tokens supprim√©s")
                else:
                    print("   ‚ÑπÔ∏è Aucun token temporaire √† supprimer")
                    self.log_test("Temporary Token Cleanup", True, 
                                "Syst√®me d√©j√† propre")
                return True
            else:
                self.log_test("Temporary Token Cleanup", False, 
                            f"Status: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Temporary Token Cleanup", False, f"Error: {str(e)}")
            return False
    
    def run_comprehensive_diagnostic(self):
        """Ex√©cuter le diagnostic complet"""
        print("üöÄ D√âMARRAGE DIAGNOSTIC OAUTH FACEBOOK - TRACER √âCHEC TOKENS EAA")
        print("=" * 80)
        
        # Authentification pr√©liminaire
        if not self.authenticate():
            print("‚ùå √âCHEC AUTHENTIFICATION - Arr√™t du diagnostic")
            return
        
        # Ex√©cuter tous les tests
        print(f"\nüìã DIAGNOSTIC COMPLET - User ID: {self.user_id}")
        
        # Tests principaux
        auth_url = self.test_facebook_auth_url_generation()
        self.test_callback_endpoint_accessibility()
        self.test_facebook_environment_variables()
        connections_info = self.test_current_social_connections()
        self.simulate_callback_flow_steps()
        self.test_publication_with_current_tokens()
        self.cleanup_temporary_tokens()
        
        # R√©sum√© final
        self.print_final_summary(connections_info)
    
    def print_final_summary(self, connections_info):
        """Afficher le r√©sum√© final du diagnostic"""
        print("\n" + "=" * 80)
        print("üìä R√âSUM√â DIAGNOSTIC OAUTH FACEBOOK")
        print("=" * 80)
        
        # Statistiques des tests
        total_tests = len(self.test_results)
        passed_tests = len([t for t in self.test_results if t['success']])
        failed_tests = total_tests - passed_tests
        
        print(f"üìà Tests ex√©cut√©s: {total_tests}")
        print(f"‚úÖ Tests r√©ussis: {passed_tests}")
        print(f"‚ùå Tests √©chou√©s: {failed_tests}")
        print(f"üìä Taux de r√©ussite: {(passed_tests/total_tests)*100:.1f}%")
        
        # Analyse des connexions
        if connections_info:
            print(f"\nüìò √âTAT CONNEXIONS FACEBOOK:")
            print(f"   Total connexions: {connections_info['total']}")
            print(f"   Connexions actives: {connections_info['active']}")
            print(f"   Connexions Facebook: {connections_info['facebook']}")
            print(f"   Tokens temporaires: {connections_info['temp_tokens']}")
        
        # Diagnostic des √©tapes OAuth
        print(f"\nüîÑ DIAGNOSTIC FLOW OAUTH 3-√âTAPES:")
        oauth_tests = [t for t in self.test_results if 'OAuth' in t['test']]
        for test in oauth_tests:
            status = "‚úÖ" if test['success'] else "‚ùå"
            print(f"   {status} {test['test']}: {test['details']}")
        
        # Recommandations
        print(f"\nüí° RECOMMANDATIONS:")
        
        if connections_info and connections_info['temp_tokens'] > 0:
            print("   üîß CRITIQUE: Tokens temporaires d√©tect√©s - callback OAuth √©choue")
            print("   üìù ACTION: V√©rifier impl√©mentation callback 3-√©tapes")
            print("   üéØ FOCUS: √âTAPE 1‚Üí2‚Üí3 (Code‚ÜíShort‚ÜíLong‚ÜíEAA)")
        
        if failed_tests > 0:
            print("   ‚ö†Ô∏è Tests √©chou√©s d√©tect√©s - voir d√©tails ci-dessus")
        
        print(f"\nüéØ QUESTION CENTRALE R√âPONDUE:")
        print(f"   √Ä quelle √©tape exacte le flow OAuth √©choue-t-il?")
        
        # Identifier l'√©tape d'√©chec
        if connections_info and connections_info['temp_tokens'] > 0:
            print("   üìç R√âPONSE: Le flow √©choue √† l'√âTAPE 1 (Code ‚Üí Short-lived token)")
            print("   üîç CAUSE: Le callback cr√©e des tokens temporaires au lieu d'√©changer le code")
        elif connections_info and connections_info['facebook'] > 0:
            eaa_test = next((t for t in self.test_results if 'EAA' in t['test']), None)
            if eaa_test and not eaa_test['success']:
                print("   üìç R√âPONSE: Le flow √©choue √† l'√âTAPE 3 (Long-lived ‚Üí EAA)")
                print("   üîç CAUSE: Tokens long terme cr√©√©s mais pas de tokens EAA permanents")
            else:
                print("   üìç R√âPONSE: Flow semble fonctionnel - v√©rifier publication")
        else:
            print("   üìç R√âPONSE: Aucune connexion Facebook - callback ne fonctionne pas")
        
        print("=" * 80)

def main():
    """Point d'entr√©e principal"""
    diagnostic = FacebookOAuthDiagnostic()
    diagnostic.run_comprehensive_diagnostic()

if __name__ == "__main__":
    main()
        
        try:
            # R√©cup√©rer un post pour test
            posts_response = self.session.get(f"{BACKEND_URL}/posts/generated", timeout=30)
            
            if posts_response.status_code != 200:
                print(f"   ‚ùå Impossible de r√©cup√©rer les posts")
                return False
            
            posts_data = posts_response.json()
            posts = posts_data.get("posts", [])
            
            if not posts:
                print(f"   ‚ö†Ô∏è Aucun post disponible")
                return False
            
            # Chercher post Facebook avec image
            test_post = None
            for post in posts:
                if post.get("platform") == "facebook":
                    test_post = post
                    break
            
            if not test_post:
                print(f"   ‚ùå Aucun post Facebook trouv√©")
                return False
            
            post_id = test_post.get("id")
            has_image = bool(test_post.get("visual_url"))
            
            print(f"   üìã Test flow avec post: {post_id}")
            print(f"   üìã Contient image: {'Oui' if has_image else 'Non'}")
            print(f"   üìã Image URL: {test_post.get('visual_url', 'Aucune')}")
            
            # Tracer la requ√™te de publication
            print(f"\nüîÑ TRA√áAGE DU FLOW DE PUBLICATION:")
            start_time = time.time()
            
            pub_response = self.session.post(
                f"{BACKEND_URL}/posts/publish",
                json={"post_id": post_id},
                timeout=60
            )
            
            end_time = time.time()
            duration = end_time - start_time
            
            print(f"   ‚è±Ô∏è Dur√©e totale: {duration:.2f} secondes")
            print(f"   üìä Status: {pub_response.status_code}")
            
            if pub_response.status_code == 200:
                pub_data = pub_response.json()
                print(f"   üéâ FLOW COMPLET R√âUSSI!")
                print(f"   üìã R√©ponse: {json.dumps(pub_data, indent=2)}")
                
                # Chercher indices d'utilisation du callback
                response_str = str(pub_data).lower()
                if "callback" in response_str or "√©tape" in response_str:
                    print(f"   üîç Indices de callback d√©tect√©s dans la r√©ponse")
                
                return True
                
            elif pub_response.status_code == 400:
                pub_data = pub_response.json()
                error_msg = pub_data.get("error", "")
                print(f"   üìã Erreur flow: {error_msg}")
                
                # Analyser le type d'erreur
                if "Invalid OAuth access token" in error_msg:
                    print(f"   üö® Token OAuth rejet√© par Facebook")
                    print(f"   üìã Tokens EAA peut-√™tre pas vraiment permanents")
                elif "Aucune connexion sociale active" in error_msg:
                    print(f"   üìã Pas de connexion active trouv√©e")
                    print(f"   üìã Callback n'a peut-√™tre pas sauvegard√© les connexions")
                
                return False
            else:
                print(f"   ‚ùå R√©ponse inattendue: {pub_response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur test 4: {e}")
            return False
    
    def test_5_verification_instagram_meme_token(self, connections_data):
        """TEST 5: V√©rification Instagram avec m√™me token"""
        print("\nüì± TEST 5: V√©rification Instagram avec m√™me token...")
        print("   üéØ Objectif: Si Instagram Business connect√©")
        print("   üéØ V√©rifier qu'Instagram utilise m√™me page_access_token")
        print("   üéØ Tester publication Instagram avec token permanent")
        
        if not connections_data:
            print("   ‚ùå Pas de donn√©es de connexions")
            return False
        
        try:
            facebook_tokens = []
            instagram_tokens = []
            
            # Collecter tous les tokens Facebook et Instagram
            for collection_name in ["social_media_connections", "social_connections_old"]:
                connections = connections_data.get(collection_name, [])
                
                for conn in connections:
                    platform = conn.get("platform", "").lower()
                    access_token = conn.get("access_token", "")
                    token_type = conn.get("token_type", "")
                    is_active = conn.get("active", conn.get("is_active", False))
                    
                    if platform == "facebook" and access_token:
                        facebook_tokens.append({
                            "token": access_token,
                            "type": token_type,
                            "active": is_active,
                            "collection": collection_name
                        })
                    elif platform == "instagram" and access_token:
                        instagram_tokens.append({
                            "token": access_token,
                            "type": token_type,
                            "active": is_active,
                            "collection": collection_name
                        })
            
            print(f"   üìä Tokens Facebook trouv√©s: {len(facebook_tokens)}")
            print(f"   üìä Tokens Instagram trouv√©s: {len(instagram_tokens)}")
            
            if not facebook_tokens and not instagram_tokens:
                print(f"   ‚ö†Ô∏è Aucun token trouv√© pour comparaison")
                return False
            
            # V√©rifier si Instagram utilise le m√™me token que Facebook
            shared_tokens = 0
            for fb_token in facebook_tokens:
                for ig_token in instagram_tokens:
                    if fb_token["token"] == ig_token["token"]:
                        shared_tokens += 1
                        print(f"   ‚úÖ TOKEN PARTAG√â TROUV√â!")
                        print(f"      Token: {fb_token['token'][:35]}...")
                        print(f"      Type: {fb_token['type']}")
                        print(f"      Facebook actif: {fb_token['active']}")
                        print(f"      Instagram actif: {ig_token['active']}")
                        print(f"      ‚úÖ M√™me page_access_token utilis√© par les deux plateformes")
            
            if shared_tokens > 0:
                print(f"   üéâ SUCC√àS: Instagram utilise m√™me page_access_token")
                
                # Tester publication Instagram si possible
                try:
                    posts_response = self.session.get(f"{BACKEND_URL}/posts/generated", timeout=30)
                    if posts_response.status_code == 200:
                        posts_data = posts_response.json()
                        posts = posts_data.get("posts", [])
                        
                        instagram_post = None
                        for post in posts:
                            if post.get("platform") == "instagram":
                                instagram_post = post
                                break
                        
                        if instagram_post:
                            print(f"   üì± Test publication Instagram avec token permanent...")
                            pub_response = self.session.post(
                                f"{BACKEND_URL}/posts/publish",
                                json={"post_id": instagram_post.get("id")},
                                timeout=60
                            )
                            
                            if pub_response.status_code == 200:
                                print(f"   ‚úÖ Publication Instagram r√©ussie avec token permanent!")
                            else:
                                print(f"   üìã Publication Instagram: {pub_response.status_code}")
                        
                except Exception as ig_test_error:
                    print(f"   ‚ö†Ô∏è Test publication Instagram √©chou√©: {ig_test_error}")
                
                return True
            else:
                print(f"   üìã Instagram et Facebook utilisent des tokens diff√©rents")
                
                # Afficher d√©tails pour analyse
                if facebook_tokens:
                    print(f"   üìò Tokens Facebook:")
                    for i, token in enumerate(facebook_tokens):
                        print(f"      {i+1}. {token['token'][:35]}... (type: {token['type']})")
                
                if instagram_tokens:
                    print(f"   üì∑ Tokens Instagram:")
                    for i, token in enumerate(instagram_tokens):
                        print(f"      {i+1}. {token['token'][:35]}... (type: {token['type']})")
                
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur test 5: {e}")
            return False
    
    def run_comprehensive_chatgpt_token_flow_test(self):
        """Ex√©cuter tous les tests du flow ChatGPT 3-√©tapes"""
        print("üöÄ D√âBUT TEST FLOW TOKENS PERMANENTS CHATGPT")
        print("=" * 80)
        print(f"Backend URL: {BACKEND_URL}")
        print(f"Utilisateur: {TEST_CREDENTIALS['email']}")
        print(f"Timestamp: {datetime.now().isoformat()}")
        print("=" * 80)
        
        results = {
            "authentication": False,
            "test_1_token_state": False,
            "test_2_publication": False,
            "test_3_token_validation": False,
            "test_4_publication_flow": False,
            "test_5_instagram_verification": False,
            "has_permanent_eaa_tokens": False,
            "connections_data": None
        }
        
        # √âTAPE 1: Authentification
        if not self.authenticate():
            print("\n‚ùå CRITIQUE: Authentification √©chou√©e - impossible de continuer")
            return results
        results["authentication"] = True
        
        # TEST 1: V√©rifier √©tat tokens apr√®s reconnexion
        has_eaa_tokens, connections_data = self.test_1_verifier_etat_tokens_apres_reconnexion()
        results["test_1_token_state"] = True
        results["has_permanent_eaa_tokens"] = has_eaa_tokens
        results["connections_data"] = connections_data
        
        # TEST 2: Test publication avec tokens permanents
        pub_success = self.test_2_publication_avec_tokens_permanents()
        results["test_2_publication"] = pub_success
        
        # TEST 3: Validation format tokens sauvegard√©s
        if connections_data:
            token_validation = self.test_3_validation_format_tokens_sauvegardes(connections_data)
            results["test_3_token_validation"] = token_validation
        
        # TEST 4: Test flow publication complet
        flow_success = self.test_4_flow_publication_complet()
        results["test_4_publication_flow"] = flow_success
        
        # TEST 5: V√©rification Instagram avec m√™me token
        if connections_data:
            instagram_verification = self.test_5_verification_instagram_meme_token(connections_data)
            results["test_5_instagram_verification"] = instagram_verification
        
        # G√©n√©rer le r√©sum√© final
        self.generate_chatgpt_flow_summary(results)
        
        return results
    
    def generate_chatgpt_flow_summary(self, results):
        """G√©n√©rer le r√©sum√© final du test ChatGPT flow"""
        print("\n" + "=" * 80)
        print("üéØ R√âSUM√â FINAL - TEST FLOW TOKENS PERMANENTS CHATGPT")
        print("=" * 80)
        
        total_tests = 5
        passed_tests = sum([
            results["test_1_token_state"],
            results["test_2_publication"],
            results["test_3_token_validation"],
            results["test_4_publication_flow"],
            results["test_5_instagram_verification"]
        ])
        
        print(f"üìä R√©sultats globaux: {passed_tests}/{total_tests} tests r√©ussis")
        print(f"üìä Taux de r√©ussite: {(passed_tests/total_tests)*100:.1f}%")
        
        print(f"\nüìã D√©tail des r√©sultats:")
        print(f"   ‚úÖ Authentification: {'R√âUSSI' if results['authentication'] else '√âCHOU√â'}")
        print(f"   üîç Test 1 - √âtat tokens: {'R√âUSSI' if results['test_1_token_state'] else '√âCHOU√â'}")
        print(f"   üìù Test 2 - Publication: {'R√âUSSI' if results['test_2_publication'] else '√âCHOU√â'}")
        print(f"   üîç Test 3 - Validation tokens: {'R√âUSSI' if results['test_3_token_validation'] else '√âCHOU√â'}")
        print(f"   üîÑ Test 4 - Flow publication: {'R√âUSSI' if results['test_4_publication_flow'] else '√âCHOU√â'}")
        print(f"   üì± Test 5 - Instagram: {'R√âUSSI' if results['test_5_instagram_verification'] else '√âCHOU√â'}")
        
        print(f"\nüéØ Conclusions cl√©s:")
        if results["has_permanent_eaa_tokens"]:
            print(f"   ‚úÖ TOKENS EAA PERMANENTS D√âTECT√âS")
            print(f"   üéâ Flow 3-√©tapes ChatGPT R√âUSSI")
            print(f"   üìã Tokens devraient fonctionner pour publication Facebook r√©elle")
        else:
            print(f"   ‚ùå AUCUN TOKEN EAA PERMANENT TROUV√â")
            print(f"   ‚ö†Ô∏è Flow 3-√©tapes ChatGPT NON TERMIN√â")
            print(f"   üìã Utilisateur doit reconnecter Facebook pour tokens permanents")
        
        if results["test_2_publication"]:
            print(f"   ‚úÖ Syst√®me de publication fonctionnel")
        else:
            print(f"   ‚ùå Syst√®me de publication a des probl√®mes")
        
        if results["test_5_instagram_verification"]:
            print(f"   ‚úÖ Instagram partage le m√™me page_access_token")
        else:
            print(f"   ‚ö†Ô∏è Instagram utilise un token diff√©rent ou n'est pas connect√©")
        
        print(f"\nüîß Recommandations:")
        if not results["has_permanent_eaa_tokens"]:
            print(f"   1. Utilisateur doit reconnecter le compte Facebook")
            print(f"   2. S'assurer que le flow OAuth 3-√©tapes se termine correctement")
            print(f"   3. V√©rifier la configuration de l'URL de callback")
        
        if not results["test_2_publication"]:
            print(f"   1. V√©rifier la validit√© des tokens OAuth")
            print(f"   2. V√©rifier les permissions de l'API Facebook")
            print(f"   3. Tester avec des tokens EAA valides")
        
        print(f"\nüéØ HYPOTH√àSE TEST√âE:")
        if results["has_permanent_eaa_tokens"] and results["test_2_publication"]:
            print(f"   ‚úÖ CONFIRM√âE: Avec vrais tokens permanents (EAA), Facebook accepte les publications avec images")
        elif results["has_permanent_eaa_tokens"] and not results["test_2_publication"]:
            print(f"   ‚ö†Ô∏è PARTIELLEMENT CONFIRM√âE: Tokens EAA pr√©sents mais publication √©choue")
        else:
            print(f"   ‚ùå NON CONFIRM√âE: Pas de tokens EAA permanents d√©tect√©s")
        
        print("=" * 80)

def main():
    """Fonction principale - Test Flow Tokens Permanents ChatGPT"""
    tester = ChatGPTTokenFlowTester()
    results = tester.run_comprehensive_chatgpt_token_flow_test()
    
    print(f"\nüíæ Test termin√© √† {datetime.now().isoformat()}")
    
    # Sauvegarder les r√©sultats
    try:
        with open("/app/chatgpt_token_flow_test_results.json", "w") as f:
            json.dump(results, f, indent=2, default=str)
        print("üìÅ R√©sultats sauvegard√©s dans chatgpt_token_flow_test_results.json")
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible de sauvegarder: {e}")
    
    # Code de sortie bas√© sur les r√©sultats
    if results["has_permanent_eaa_tokens"] and results["test_2_publication"]:
        print("\nüéâ SUCC√àS: Flow ChatGPT 3-√©tapes fonctionne correctement!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS: Flow ChatGPT 3-√©tapes n√©cessite attention")
        sys.exit(1)

if __name__ == "__main__":
    main()