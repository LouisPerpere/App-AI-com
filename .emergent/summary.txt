<analysis>
The AI engineer's trajectory showcases an extensive, iterative process to implement and stabilize social media publishing for the Claire et Marcus PWA, primarily focusing on Facebook and Instagram. The initial task involved refining the post modification workflow and hiding UI elements, which was quickly completed. The core of the work then shifted to implementing actual publishing via a Publier button. This led to a prolonged debugging cycle centered on persistent OAuth issues, particularly with Facebook. Key challenges included: identifying and resolving mismatches in database collection names ( vs. ), incorrect field names ( vs. ), hardcoded preview URLs in production code, faulty fallback token mechanisms, and misconfigurations in Facebook App IDs and Config IDs during the OAuth flow. The engineer employed  and  extensively to diagnose root causes. The trajectory concludes with the engineer in the process of applying a user-provided audit, specifically implementing real Instagram publication and setting up a test endpoint.
</analysis>

<product_requirements>
The Claire et Marcus PWA aims to automate social media content generation using AI. Initial requirements focused on stabilizing social media integrations (Instagram, Facebook Login for Business), fixing content display bugs (0/22 items), and integrating LLMs for post refinement. Subsequent features included manual date/time modification for posts via a calendar popup, enhancing the Valider button to use the post's date/time and provide visual feedback, and improving the calendar UI to view, move, and cancel scheduled posts. Validated posts in the Posts tab needed to be read-only, displaying a Programmé badge. The post modification workflow was enhanced with AI rephrasing and a preview with Confirmer, Annuler, Modifier à nouveau options. Recent UX refinements included simplifying calendar post actions and hiding Valider and Modifier buttons during the advanced modification process. The current overarching goal is to implement actual social media publishing (starting with Facebook, then Instagram) when the Valider (now Publier) button is clicked, transitioning posts to a published status.
</product_requirements>

<key_technical_concepts>
- **Full-stack Development**: React.js (Frontend), FastAPI (Backend), MongoDB (Database).
- **Authentication**: OAuth 2.0 (Facebook/Instagram Graph API), JWT tokens.
- **State Management**: React , , .
- **API Interaction**:  for FastAPI endpoints.
- **Error Handling & Debugging**: Console logs, , , .
- **Deployment**: Supervisor, Kubernetes Ingress rules.
- **MongoDB Serialization**: Handling  and  objects.
</key_technical_concepts>

<code_architecture>

- ****: Main FastAPI application.
    - **Importance**: Handles all backend logic, API routes, and database interactions (CRUD for posts, auth, social media, etc.).
    - **Changes Made**:
        - : Modified to include  field.
        - : Debug logs added.
        - New : Created for real social media publication, handles Facebook and Instagram API calls, updates post status to published. Initially had  serialization issues, fixed.
        - , : Modified to use  (and ) and  (and ) consistently.
        - , : Heavily refactored. Corrected collection name ( to ), field name ( to ), fixed variable scope issues, removed hardcoded preview URLs, ensured proper OAuth token exchange logic (page token vs. user token), and ensured successful connections are saved to DB.
        - : Modified to update  and  counters for associated content to manage library badges.
        - : Corrected to use  collection.
        - Debug endpoints: , , ,  were added for diagnostic and cleanup purposes.
        - Added  import and inclusion.

- ****: Contains FacebookAPIClient for social media interactions.
    - **Importance**: Encapsulates external API calls for social media.
    - **Changes Made**:
        -  and  fallbacks changed from  to environment variables.
        - Updated  to use correct  for OAuth exchange.
        - Implemented real Instagram publishing logic.

- ****: Logic for generating posts.
    - **Importance**: Determines which platforms to generate posts for based on active connections.
    - **Changes Made**:
        - : Corrected to query  collection and use the  field for identifying connected platforms, ensuring accurate post generation.

- ****: Main React component, state, UI.
    - **Importance**: Renders application, handles user interactions, displays posts/calendar, manages modification workflows.
    - **Changes Made**:
        - **Post modification UI**: Logic added to hide/gray out Valider and Modifier buttons when modification workflow is active.
        - : Modified to call the new  endpoint.
        - Button text Valider changed to Publier.
        - UI for published posts: Displays Publié status.
        - Error handling: Improved toast notifications for backend errors.
        - Platform display: Replaced text labels (e.g., Facebook, Instagram) with their respective logos in the posts display and modal.
        - , : Ensured dynamic URL generation for OAuth uses correct parameters.
</code_architecture>

<pending_tasks>
- Fully implement the analytics dashboard for published posts.
- Diagnose and fix carousel deletion (if still present).
- Diagnose and fix recurring photo modification issue (blue question mark).
- Work with infrastructure team to resolve any remaining external proxy/cache issues.
- Finalize carousel display logic (grey placeholder instead of first image).
- Continue to apply and verify all corrections on the LIVE environment.
- The minor issue where the secondary modification area disappears after the second AI processing, preventing full testing of differentiated cancellation, could be revisited.
- The user's request for a complete skeleton of the OAuth flow for Facebook and Instagram in Python FastAPI.
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer was deep into resolving persistent Facebook and Instagram OAuth and publication issues. Despite numerous fixes to database collection names, field names, token exchange logic, hardcoded URLs, and configuration IDs, Facebook connections were not persisting, and actual publication (for both Facebook and Instagram) was not occurring. The AI engineer had just provided a comprehensive status report to the user, outlining what was working, partially working, and completely broken, along with detailed diagnostics.

The user then provided a comprehensive audit of the code, reinforcing many of the AI's recent findings and suggesting specific code changes for:
1.  **OAuth Flow**: Ensuring  and  are received, and  are exchanged.
2.  **Storage**: Correctly saving page tokens to .
3.  **Publication**: Using the correct  for Facebook  and Instagram  endpoints (un-mocking Instagram publication).
4.  **Frontend**: Visually marking successful connections.
5.  **Tests**: Creating an isolated test endpoint.

The AI engineer has begun implementing these suggestions. Specifically, the following actions have just been completed:
-   Adding detailed logging for  and  in the Facebook callback.
-   Correcting the Facebook  to  exchange to use the *page access token*.
-   Ensuring the acquired Facebook page access token is correctly saved to .
-   Creating a dedicated test endpoint  for isolated Facebook publication testing.
-   Replacing the simulated Instagram publication logic with actual calls to the Instagram Graph API.

The very last action taken was preparing to create a test endpoint for Instagram publication.
</current_work>

<optional_next_step>
Create a dedicated test endpoint for isolated Instagram publication testing.
</optional_next_step>
