<analysis>
The AI engineer's work addressed several critical issues for the Claire et Marcus PWA, primarily focusing on social media integration, content generation, and media management. Initially, efforts centered on resolving phantom posts (traced to  misconfiguration and frontend caching) and refining multi-platform post generation logic in . A significant portion involved debugging Facebook and Instagram OAuth, which suffered from incorrect redirect URIs,  usage, and shared callback URLs leading to conflicts. Media display issues (grey placeholders) were tackled by diagnosing missing GridFS storage, repairing corrupted media metadata, and adjusting frontend display logic in  and backend . The engineer also added a per-post delete button. The trajectory concluded with the user providing separate Facebook and Instagram s, prompting the engineer to update the backend to use these dedicated configurations to resolve persistent authentication conflicts and  errors.
</analysis>

<product_requirements>
The Claire et Marcus PWA automates social media content, generating Instagram calendars with AI visuals/text using business profiles, website analysis, user uploads, and notes. Core features include post modification, diverse visuals, carousel support, and monthly content sections. Initial requirements were fixing Instagram integration, migrating to Facebook Login for Business, managing photos, and using OpenAI GPT-4o with Claude Sonnet 4 backup. UI improvements included header fixes and a website analysis progress bar. The goal is automated publication on Facebook and Instagram, requiring robust account connectivity and refined post generation logic (only for connected networks). Subsequent requests involved fixing connecté undefined on Facebook, persistent phantom posts, incorrect generation month, adding a post delete button, resolving image upload/display issues (grey placeholder), and debugging Instagram and Facebook authentication failures (e.g., Invalid Scopes, URL bloquée). The user ultimately provided dedicated Facebook and Instagram Config IDs for separate management.
</product_requirements>

<key_technical_concepts>
- **Full-stack Development**: React.js (Frontend), FastAPI (Backend), MongoDB (Database).
- **LLM Integration**: OpenAI GPT-4o, Anthropic Claude Sonnet 4, intelligent LLM orchestration, Emergent LLM Key.
- **Authentication/Authorization**: OAuth 2.0 (Facebook Login for Business, Instagram Graph API).
- **Data Management**: MongoDB collections, GridFS, UUIDs, environment variables ().
- **Deployment**: Kubernetes Ingress rules, supervisor, .
</key_technical_concepts>

<code_architecture>

-   ****: Main FastAPI application handling API routes, authentication, and social media callbacks.
    -   **Importance**: Orchestrates all backend interactions.
    -   **Changes Made**: Heavily modified for Facebook/Instagram OAuth callbacks, separating them to prevent conflicts. Debug endpoints were added/removed. The logic for  was updated to correctly retrieve both Facebook and Instagram connections. Image attachment endpoints were adjusted. Authentication flows for Facebook and Instagram were iteratively refined to use correct , , and  (including reverting changes that broke working features).
-   ****: Manages AI-driven social media post generation.
    -   **Importance**: Generates tailored posts using LLMs.
    -   **Changes Made**: Logic was refined to correctly identify and use connected platforms (, ), ensuring posts are generated only for active social networks.
-   ****: Stores backend environment variables.
    -   **Importance**: Critical for configuration (DB URL, API keys, redirect URIs).
    -   **Changes Made**:  was updated to a local instance.  and  were adjusted for preview/live environments.  was introduced, then  was added. Most recently,  (1309694717566880) and  (1878388119742903) were added based on user input for dedicated configurations.
-   ****: Main React component.
    -   **Importance**: Manages UI state, renders posts, handles user interactions like social connection and image upload.
    -   **Changes Made**: Corrected display of Facebook username (from  to ). Implemented  and integrated a delete button ( icon) on each post. Added a Forcer le rechargement button for posts. Modified image display logic to correctly show an Ajouter image placeholder for posts without valid images and prevent  empty string issues.
-   ****: Handles content file serving.
    -   **Importance**: Serves uploaded images and other media.
    -   **Changes Made**: Modified the  endpoint to correctly serve media regardless of whether it was initially stored in GridFS or marked as external, especially after media corruption fixes. Added support for HEAD requests to check image accessibility.
-   ****: (New file) A script to identify and reset posts with corrupted image references to a needs_image status.
-   ****: (New file) A script to repair media documents in MongoDB by adding missing  and  fields, making them accessible.
</code_architecture>

<pending_tasks>
- Fully implement the scheduling system for automated publications.
- Implement the analytics dashboard for published posts.
- Diagnose and fix carousel deletion (if still present).
- Diagnose and fix recurring photo modification issue (blue question mark).
- Work with infrastructure team to resolve any remaining external proxy/cache issues.
- Finalize carousel display logic (grey placeholder instead of first image).
- Continue to apply and verify all corrections on the LIVE environment, given the discrepancies with PREVIEW.
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer was addressing the persistent authentication issues for Facebook and Instagram. The user reported that while Instagram was working on PREVIEW, Facebook broke with an URL bloquée error, and Instagram still failed on LIVE. The user then provided new, dedicated s:  for Facebook-only access and  for Instagram-only access.

The AI engineer's current task is to integrate these new dedicated s into the backend. Specifically, the last action mentioned was updating the Facebook authentication logic in  to use the newly provided  (). This is to ensure Facebook authentication works reliably without conflicting with Instagram, utilizing a separate, purpose-built configuration. This follows a period of trying to consolidate, then separate, the OAuth flows and callbacks for both platforms, repeatedly encountering issues with  and redirect URI mismatches on Facebook's side. The goal is to ensure both platforms can connect simultaneously and stably with their respective, distinct configurations.
</current_work>

<optional_next_step>
Update the  file with  and then modify  to utilize this new Facebook-specific configuration.
</optional_next_step>
