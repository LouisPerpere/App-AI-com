#!/usr/bin/env python3
"""
DIAGNOSTIC √âTAT ACTUEL TOKENS FACEBOOK - SONT-ILS PERMANENTS ?

Test complet pour v√©rifier si les tokens Facebook sauvegard√©s sont maintenant 
des vrais tokens permanents (EAAG/EAA) ou encore des tokens temporaires.

Identifiants: lperpere@yahoo.fr / L@Reunion974!
"""

import requests
import json
import os
import sys
from datetime import datetime
import re

# Configuration
BACKEND_URL = "https://social-publisher-10.preview.emergentagent.com/api"
TEST_CREDENTIALS = {
    "email": "lperpere@yahoo.fr",
    "password": "L@Reunion974!"
}

class FacebookTokenDiagnostic:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.user_id = None
        
    def authenticate(self):
        """Authentification avec les identifiants de test"""
        print("üîê √âTAPE 1: Authentification...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login-robust",
                json=TEST_CREDENTIALS,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.user_id = data.get("user_id")
                
                # Set authorization header for future requests
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                print(f"   ‚úÖ Authentification r√©ussie")
                print(f"   üë§ User ID: {self.user_id}")
                return True
            else:
                print(f"   ‚ùå √âchec authentification: {response.status_code}")
                print(f"   üìÑ R√©ponse: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur authentification: {e}")
            return False
    
    def get_social_connections_debug(self):
        """V√©rifier l'√©tat des connexions sociales actuelles"""
        print("\nüîç √âTAPE 2: V√©rification √©tat des connexions sociales...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/debug/social-connections",
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Endpoint debug accessible")
                
                # Analyser les connexions
                total_connections = data.get("total_connections", 0)
                active_connections = data.get("active_connections", 0)
                facebook_connections = data.get("facebook_connections", 0)
                instagram_connections = data.get("instagram_connections", 0)
                
                print(f"   üìä Total connexions: {total_connections}")
                print(f"   üìä Connexions actives: {active_connections}")
                print(f"   üìò Connexions Facebook: {facebook_connections}")
                print(f"   üì∑ Connexions Instagram: {instagram_connections}")
                
                # Analyser les tokens Facebook en d√©tail
                connections_detail = data.get("connections_detail", [])
                facebook_tokens = []
                
                for conn in connections_detail:
                    if conn.get("platform") == "facebook":
                        facebook_tokens.append(conn)
                
                print(f"\nüîç ANALYSE D√âTAILL√âE DES TOKENS FACEBOOK:")
                if not facebook_tokens:
                    print("   ‚ùå Aucun token Facebook trouv√©")
                    return {"facebook_tokens": [], "analysis": "no_tokens"}
                
                for i, token_info in enumerate(facebook_tokens, 1):
                    print(f"\n   üìò TOKEN FACEBOOK #{i}:")
                    
                    access_token = token_info.get("access_token", "")
                    is_active = token_info.get("active", False)
                    created_at = token_info.get("created_at", "")
                    
                    print(f"      üîë Token: {access_token[:50]}..." if len(access_token) > 50 else f"      üîë Token: {access_token}")
                    print(f"      ‚ö° Actif: {is_active}")
                    print(f"      üìÖ Cr√©√©: {created_at}")
                    
                    # Analyser le format du token
                    token_analysis = self.analyze_token_format(access_token)
                    print(f"      üìã Format: {token_analysis['type']}")
                    print(f"      üìè Longueur: {token_analysis['length']} caract√®res")
                    print(f"      üè∑Ô∏è Pr√©fixe: {token_analysis['prefix']}")
                    
                    if token_analysis['type'] == 'temporary':
                        print(f"      ‚ö†Ô∏è  TOKEN TEMPORAIRE D√âTECT√â!")
                    elif token_analysis['type'] == 'permanent':
                        print(f"      ‚úÖ TOKEN PERMANENT D√âTECT√â!")
                    else:
                        print(f"      ‚ùì FORMAT INCONNU")
                
                return {
                    "facebook_tokens": facebook_tokens,
                    "analysis": "tokens_found",
                    "total_connections": total_connections,
                    "active_connections": active_connections
                }
                
            else:
                print(f"   ‚ùå Erreur endpoint debug: {response.status_code}")
                print(f"   üìÑ R√©ponse: {response.text}")
                return {"facebook_tokens": [], "analysis": "endpoint_error"}
                
        except Exception as e:
            print(f"   ‚ùå Erreur r√©cup√©ration connexions: {e}")
            return {"facebook_tokens": [], "analysis": "exception"}
    
    def analyze_token_format(self, token):
        """Analyser le format d'un token Facebook"""
        if not token:
            return {"type": "empty", "length": 0, "prefix": ""}
        
        length = len(token)
        
        # V√©rifier les pr√©fixes de tokens permanents Facebook
        if token.startswith("EAAG") or token.startswith("EAA"):
            return {
                "type": "permanent",
                "length": length,
                "prefix": token[:4],
                "expected_length": "200+ caract√®res pour tokens permanents"
            }
        
        # V√©rifier les tokens temporaires (pattern temp_)
        if token.startswith("temp_"):
            return {
                "type": "temporary", 
                "length": length,
                "prefix": token[:10],
                "expected_length": "Variable pour tokens temporaires"
            }
        
        # V√©rifier autres patterns temporaires
        if "temp" in token.lower() or "test" in token.lower():
            return {
                "type": "temporary",
                "length": length, 
                "prefix": token[:10],
                "expected_length": "Variable pour tokens temporaires"
            }
        
        # Token format inconnu mais analyser la longueur
        if length > 200:
            return {
                "type": "possibly_permanent",
                "length": length,
                "prefix": token[:10],
                "expected_length": "200+ caract√®res sugg√®rent token permanent"
            }
        else:
            return {
                "type": "unknown_short",
                "length": length,
                "prefix": token[:10],
                "expected_length": "< 200 caract√®res, possiblement temporaire"
            }
    
    def test_publication_with_validation(self):
        """Test validation token avec nouveaux crit√®res"""
        print("\nüß™ √âTAPE 3: Test validation token avec publication...")
        
        try:
            # D'abord, r√©cup√©rer un post Facebook pour tester
            posts_response = self.session.get(
                f"{BACKEND_URL}/posts/generated",
                timeout=30
            )
            
            if posts_response.status_code != 200:
                print(f"   ‚ùå Impossible de r√©cup√©rer les posts: {posts_response.status_code}")
                return {"test_result": "no_posts"}
            
            posts_data = posts_response.json()
            posts = posts_data.get("posts", [])
            
            # Chercher un post Facebook avec image
            facebook_post = None
            for post in posts:
                if post.get("platform") == "facebook" and post.get("visual_url"):
                    facebook_post = post
                    break
            
            if not facebook_post:
                print("   ‚ö†Ô∏è  Aucun post Facebook avec image trouv√©")
                # Cr√©er un post de test si n√©cessaire
                return {"test_result": "no_facebook_posts"}
            
            post_id = facebook_post.get("id")
            print(f"   üìù Post de test trouv√©: {post_id}")
            print(f"   üñºÔ∏è  Image: {facebook_post.get('visual_url', 'N/A')}")
            
            # Tenter la publication
            publish_response = self.session.post(
                f"{BACKEND_URL}/posts/publish",
                json={"post_id": post_id},
                timeout=30
            )
            
            print(f"   üì§ Statut publication: {publish_response.status_code}")
            
            if publish_response.status_code == 200:
                result = publish_response.json()
                print(f"   ‚úÖ Publication r√©ussie!")
                print(f"   üìÑ R√©ponse: {json.dumps(result, indent=2)}")
                return {"test_result": "success", "response": result}
            else:
                error_text = publish_response.text
                print(f"   ‚ùå Publication √©chou√©e")
                print(f"   üìÑ Erreur: {error_text}")
                
                # Analyser le type d'erreur
                if "connexion sociale active" in error_text.lower():
                    return {"test_result": "no_active_connections", "error": error_text}
                elif "invalid oauth" in error_text.lower():
                    return {"test_result": "invalid_token", "error": error_text}
                elif "cannot parse access token" in error_text.lower():
                    return {"test_result": "unparseable_token", "error": error_text}
                else:
                    return {"test_result": "other_error", "error": error_text}
                    
        except Exception as e:
            print(f"   ‚ùå Erreur test publication: {e}")
            return {"test_result": "exception", "error": str(e)}
    
    def trace_publication_flow(self):
        """Diagnostic flow de publication actuel"""
        print("\nüîÑ √âTAPE 4: Diagnostic flow de publication...")
        
        try:
            # V√©rifier les endpoints de publication disponibles
            endpoints_to_test = [
                "/posts/publish",
                "/social/facebook/publish-simple", 
                "/social/instagram/publish-simple"
            ]
            
            for endpoint in endpoints_to_test:
                print(f"\n   üîç Test endpoint: {endpoint}")
                
                # Test avec donn√©es minimales pour voir la r√©ponse
                test_data = {"post_id": "test_post_id"}
                
                response = self.session.post(
                    f"{BACKEND_URL}{endpoint}",
                    json=test_data,
                    timeout=30
                )
                
                print(f"      üìä Statut: {response.status_code}")
                
                if response.status_code in [400, 404, 422]:
                    # Erreurs attendues avec donn√©es de test
                    try:
                        error_data = response.json()
                        print(f"      üìÑ Erreur: {error_data.get('error', response.text)}")
                    except:
                        print(f"      üìÑ Erreur: {response.text}")
                elif response.status_code == 200:
                    print(f"      ‚úÖ Endpoint accessible")
                else:
                    print(f"      ‚ùì R√©ponse inattendue: {response.text}")
            
            return {"flow_analysis": "completed"}
            
        except Exception as e:
            print(f"   ‚ùå Erreur diagnostic flow: {e}")
            return {"flow_analysis": "error", "error": str(e)}
    
    def check_carousel_conversion(self):
        """V√©rifier conversion URL carousel"""
        print("\nüé† √âTAPE 5: V√©rification conversion URL carousel...")
        
        try:
            # Tester la fonction convert_to_public_image_url via un endpoint
            test_urls = [
                "/api/content/carousel/carousel_90e5d8c2-test",
                "/api/content/12345/file",
                "https://pixabay.com/image.jpg",
                "uploads/user/image_123.jpg"
            ]
            
            print("   üîç Test de conversion d'URLs:")
            
            for test_url in test_urls:
                print(f"      üì• URL originale: {test_url}")
                
                # Simuler la conversion (nous ne pouvons pas appeler directement la fonction)
                # Mais nous pouvons tester via les endpoints de publication
                
                if "carousel_" in test_url:
                    print(f"      üé† Type: Carousel d√©tect√©")
                elif "/api/content/" in test_url and "/file" in test_url:
                    print(f"      üîí Type: URL prot√©g√©e d√©tect√©e")
                elif test_url.startswith("http"):
                    print(f"      üåê Type: URL externe d√©tect√©e")
                elif "uploads/" in test_url:
                    print(f"      üìÅ Type: Upload local d√©tect√©")
                
                print(f"      üì§ Conversion attendue: /api/public/image/[id].webp")
            
            return {"carousel_conversion": "analyzed"}
            
        except Exception as e:
            print(f"   ‚ùå Erreur v√©rification carousel: {e}")
            return {"carousel_conversion": "error", "error": str(e)}
    
    def run_complete_diagnostic(self):
        """Ex√©cuter le diagnostic complet"""
        print("üöÄ D√âBUT DIAGNOSTIC TOKENS FACEBOOK - PERMANENTS OU TEMPORAIRES?")
        print("=" * 80)
        
        results = {}
        
        # √âtape 1: Authentification
        if not self.authenticate():
            print("\n‚ùå DIAGNOSTIC INTERROMPU - √âchec authentification")
            return results
        
        # √âtape 2: √âtat des connexions sociales
        connections_result = self.get_social_connections_debug()
        results["connections"] = connections_result
        
        # √âtape 3: Test de publication
        publication_result = self.test_publication_with_validation()
        results["publication"] = publication_result
        
        # √âtape 4: Flow de publication
        flow_result = self.trace_publication_flow()
        results["flow"] = flow_result
        
        # √âtape 5: Conversion carousel
        carousel_result = self.check_carousel_conversion()
        results["carousel"] = carousel_result
        
        # Analyse finale
        self.generate_final_analysis(results)
        
        return results
    
    def generate_final_analysis(self, results):
        """G√©n√©rer l'analyse finale"""
        print("\n" + "=" * 80)
        print("üìä ANALYSE FINALE - DIAGNOSTIC TOKENS FACEBOOK")
        print("=" * 80)
        
        connections = results.get("connections", {})
        publication = results.get("publication", {})
        
        facebook_tokens = connections.get("facebook_tokens", [])
        
        if not facebook_tokens:
            print("‚ùå R√âSULTAT: AUCUN TOKEN FACEBOOK TROUV√â")
            print("   üîß ACTION REQUISE: L'utilisateur doit reconnecter Facebook")
            return
        
        print(f"üìò TOKENS FACEBOOK TROUV√âS: {len(facebook_tokens)}")
        
        permanent_tokens = 0
        temporary_tokens = 0
        
        for token_info in facebook_tokens:
            access_token = token_info.get("access_token", "")
            analysis = self.analyze_token_format(access_token)
            
            if analysis["type"] in ["permanent", "possibly_permanent"]:
                permanent_tokens += 1
            elif analysis["type"] in ["temporary"]:
                temporary_tokens += 1
        
        print(f"‚úÖ TOKENS PERMANENTS (EAAG/EAA): {permanent_tokens}")
        print(f"‚ö†Ô∏è  TOKENS TEMPORAIRES: {temporary_tokens}")
        
        # Analyse de la publication
        pub_result = publication.get("test_result", "")
        
        if pub_result == "success":
            print("‚úÖ PUBLICATION: FONCTIONNE AVEC TOKENS ACTUELS")
        elif pub_result == "invalid_token":
            print("‚ùå PUBLICATION: TOKENS INVALIDES D√âTECT√âS")
        elif pub_result == "no_active_connections":
            print("‚ö†Ô∏è  PUBLICATION: AUCUNE CONNEXION ACTIVE")
        else:
            print(f"‚ùì PUBLICATION: {pub_result}")
        
        # Conclusion finale
        print("\nüéØ CONCLUSION:")
        
        if permanent_tokens > 0 and pub_result == "success":
            print("‚úÖ LES TOKENS FACEBOOK SONT MAINTENANT PERMANENTS ET FONCTIONNELS!")
            print("   üéâ Le probl√®me de tokens temporaires a √©t√© r√©solu")
        elif permanent_tokens > 0 but pub_result != "success":
            print("‚ö†Ô∏è  TOKENS PERMANENTS D√âTECT√âS MAIS PUBLICATION √âCHOUE")
            print("   üîß V√©rifier la configuration ou les permissions")
        elif temporary_tokens > 0:
            print("‚ùå TOKENS TEMPORAIRES ENCORE PR√âSENTS")
            print("   üîß L'utilisateur doit reconnecter Facebook pour obtenir des tokens permanents")
        else:
            print("‚ùì SITUATION AMBIGU√ã - ANALYSE MANUELLE REQUISE")
        
        print("\nüìã QUESTIONS CL√âS R√âPONDUES:")
        print(f"   ‚Ä¢ Les tokens commencent-ils par EAAG/EAA? {'‚úÖ OUI' if permanent_tokens > 0 else '‚ùå NON'}")
        print(f"   ‚Ä¢ La m√©thode binaire est-elle utilis√©e? {'üîç √Ä v√©rifier dans les logs' if pub_result == 'success' else '‚ùå Publication √©choue'}")
        print(f"   ‚Ä¢ La conversion carousel fonctionne-t-elle? {'‚úÖ Logique impl√©ment√©e' if results.get('carousel', {}).get('carousel_conversion') == 'analyzed' else '‚ùì Non test√©'}")

def main():
    """Fonction principale"""
    diagnostic = FacebookTokenDiagnostic()
    results = diagnostic.run_complete_diagnostic()
    
    print(f"\nüíæ Diagnostic termin√© √† {datetime.now().isoformat()}")
    
    # Sauvegarder les r√©sultats si n√©cessaire
    try:
        with open("/app/facebook_token_diagnostic_results.json", "w") as f:
            json.dump(results, f, indent=2, default=str)
        print("üìÅ R√©sultats sauvegard√©s dans facebook_token_diagnostic_results.json")
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de sauvegarder: {e}")

if __name__ == "__main__":
    main()