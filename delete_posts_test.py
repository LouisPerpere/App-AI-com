#!/usr/bin/env python3
"""
TEST URGENT - Endpoint de suppression de tous les posts
Test sp√©cifique pour l'endpoint DELETE /api/posts/generated/all

CONTEXTE: L'interface montre encore des posts apr√®s suppression
OBJECTIF: V√©rifier que l'endpoint supprime effectivement tous les posts et reset les badges

TESTS CRITIQUES:
1. DELETE /api/posts/generated/all avec authentification
2. V√©rification suppression effective (GET /api/posts/generated)
3. V√©rification reset badges used_in_posts (GET /api/content/pending)
4. V√©rification suppression carrousels

Credentials: lperpere@yahoo.fr / L@Reunion974!
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://social-ai-planner-2.preview.emergentagent.com/api"
TEST_EMAIL = "lperpere@yahoo.fr"
TEST_PASSWORD = "L@Reunion974!"

class DeletePostsTest:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_id = None
        
    def authenticate(self):
        """Authentification avec les credentials fournis"""
        print("üîê √âTAPE 1: Authentification...")
        
        auth_data = {
            "email": TEST_EMAIL,
            "password": TEST_PASSWORD
        }
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login-robust",
                json=auth_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.user_id = data.get("user_id")
                
                # Configure headers for subsequent requests
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}",
                    "Content-Type": "application/json"
                })
                
                print(f"‚úÖ Authentification r√©ussie")
                print(f"   User ID: {self.user_id}")
                print(f"   Token: {self.token[:20]}..." if self.token else "No token")
                return True
            else:
                print(f"‚ùå √âchec authentification: {response.status_code}")
                print(f"   Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur authentification: {str(e)}")
            return False
    
    def get_posts_before_deletion(self):
        """R√©cup√©rer les posts avant suppression pour debugging"""
        print("\nüìä √âTAPE 2: V√©rification posts existants avant suppression...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/posts/generated", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                posts = data.get("posts", [])
                
                print(f"‚úÖ GET /api/posts/generated r√©ussi")
                print(f"   Nombre de posts avant suppression: {len(posts)}")
                
                if posts:
                    print(f"   Premier post ID: {posts[0].get('id', 'N/A')}")
                    print(f"   Premier post titre: {posts[0].get('title', 'N/A')}")
                    print(f"   User ID dans le premier post: {posts[0].get('owner_id', 'N/A')}")
                    
                    # Afficher les user_ids pour debugging
                    user_ids_in_posts = set()
                    for post in posts:
                        owner_id = post.get('owner_id')
                        if owner_id:
                            user_ids_in_posts.add(owner_id)
                    
                    print(f"   User IDs trouv√©s dans les posts: {list(user_ids_in_posts)}")
                    print(f"   User ID actuel: {self.user_id}")
                    
                    if self.user_id in user_ids_in_posts:
                        print(f"‚úÖ User ID match trouv√© - posts appartiennent √† l'utilisateur")
                    else:
                        print(f"‚ö†Ô∏è User ID mismatch - posts peuvent appartenir √† d'autres utilisateurs")
                
                return len(posts)
            else:
                print(f"‚ùå √âchec GET posts: {response.status_code}")
                print(f"   Response: {response.text}")
                return 0
                
        except Exception as e:
            print(f"‚ùå Erreur GET posts: {str(e)}")
            return 0
    
    def get_media_before_deletion(self):
        """R√©cup√©rer les m√©dias avec used_in_posts=true avant suppression"""
        print("\nüìä √âTAPE 3: V√©rification badges used_in_posts avant suppression...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/content/pending", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                content_items = data.get("content", [])
                
                print(f"‚úÖ GET /api/content/pending r√©ussi")
                print(f"   Nombre total de m√©dias: {len(content_items)}")
                
                # Compter les m√©dias avec used_in_posts=true
                used_in_posts_count = 0
                used_media_ids = []
                
                for item in content_items:
                    if item.get("used_in_posts", False):
                        used_in_posts_count += 1
                        used_media_ids.append(item.get("id", "N/A"))
                
                print(f"   M√©dias avec used_in_posts=true: {used_in_posts_count}")
                if used_media_ids:
                    print(f"   IDs des m√©dias utilis√©s: {used_media_ids[:5]}..." if len(used_media_ids) > 5 else f"   IDs des m√©dias utilis√©s: {used_media_ids}")
                
                return used_in_posts_count, used_media_ids
            else:
                print(f"‚ùå √âchec GET content: {response.status_code}")
                print(f"   Response: {response.text}")
                return 0, []
                
        except Exception as e:
            print(f"‚ùå Erreur GET content: {str(e)}")
            return 0, []
    
    def delete_all_posts(self):
        """TEST CRITIQUE 1: DELETE /api/posts/generated/all"""
        print("\nüóëÔ∏è TEST CRITIQUE 1: DELETE /api/posts/generated/all...")
        
        try:
            print(f"   Envoi de DELETE vers {BACKEND_URL}/posts/generated/all")
            print(f"   User ID utilis√©: {self.user_id}")
            
            response = self.session.delete(f"{BACKEND_URL}/posts/generated/all", timeout=30)
            
            print(f"   Status code re√ßu: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ DELETE /api/posts/generated/all r√©ussi")
                print(f"   Response: {json.dumps(data, indent=2)}")
                
                deleted_posts = data.get("deleted_posts", 0)
                deleted_carousels = data.get("deleted_carousels", 0)
                reset_media_flags = data.get("reset_media_flags", 0)
                
                print(f"   Posts supprim√©s: {deleted_posts}")
                print(f"   Carrousels supprim√©s: {deleted_carousels}")
                print(f"   Flags m√©dias reset: {reset_media_flags}")
                
                return True, deleted_posts, deleted_carousels, reset_media_flags
            else:
                print(f"‚ùå √âchec DELETE posts: {response.status_code}")
                print(f"   Response: {response.text}")
                return False, 0, 0, 0
                
        except Exception as e:
            print(f"‚ùå Erreur DELETE posts: {str(e)}")
            return False, 0, 0, 0
    
    def verify_posts_deletion(self):
        """TEST CRITIQUE 2: V√©rification suppression effective"""
        print("\nüîç TEST CRITIQUE 2: V√©rification suppression effective...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/posts/generated", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                posts = data.get("posts", [])
                
                print(f"‚úÖ GET /api/posts/generated apr√®s suppression r√©ussi")
                print(f"   Nombre de posts restants: {len(posts)}")
                
                if len(posts) == 0:
                    print(f"‚úÖ SUPPRESSION CONFIRM√âE: Aucun post restant")
                    return True
                else:
                    print(f"‚ùå PROBL√àME SUPPRESSION: {len(posts)} posts encore pr√©sents")
                    
                    # Afficher les posts restants pour debugging
                    for i, post in enumerate(posts[:3]):  # Afficher max 3 posts
                        print(f"   Post restant {i+1}:")
                        print(f"     ID: {post.get('id', 'N/A')}")
                        print(f"     Titre: {post.get('title', 'N/A')}")
                        print(f"     Owner ID: {post.get('owner_id', 'N/A')}")
                        print(f"     Status: {post.get('status', 'N/A')}")
                    
                    return False
            else:
                print(f"‚ùå √âchec GET posts apr√®s suppression: {response.status_code}")
                print(f"   Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur v√©rification suppression: {str(e)}")
            return False
    
    def verify_badges_reset(self, expected_reset_count):
        """TEST CRITIQUE 3: V√©rification reset badges used_in_posts"""
        print("\nüè∑Ô∏è TEST CRITIQUE 3: V√©rification reset badges used_in_posts...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/content/pending", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                content_items = data.get("content", [])
                
                print(f"‚úÖ GET /api/content/pending apr√®s suppression r√©ussi")
                print(f"   Nombre total de m√©dias: {len(content_items)}")
                
                # Compter les m√©dias avec used_in_posts=true apr√®s suppression
                used_in_posts_count = 0
                still_used_media_ids = []
                
                for item in content_items:
                    if item.get("used_in_posts", False):
                        used_in_posts_count += 1
                        still_used_media_ids.append(item.get("id", "N/A"))
                
                print(f"   M√©dias avec used_in_posts=true apr√®s suppression: {used_in_posts_count}")
                
                if used_in_posts_count == 0:
                    print(f"‚úÖ BADGES RESET CONFIRM√â: Tous les badges verts ont disparu")
                    return True
                else:
                    print(f"‚ùå PROBL√àME BADGES: {used_in_posts_count} m√©dias ont encore used_in_posts=true")
                    if still_used_media_ids:
                        print(f"   IDs des m√©dias encore marqu√©s: {still_used_media_ids[:5]}..." if len(still_used_media_ids) > 5 else f"   IDs des m√©dias encore marqu√©s: {still_used_media_ids}")
                    return False
            else:
                print(f"‚ùå √âchec GET content apr√®s suppression: {response.status_code}")
                print(f"   Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur v√©rification badges: {str(e)}")
            return False
    
    def verify_carousels_deletion(self):
        """TEST CRITIQUE 4: V√©rification suppression carrousels (si endpoint disponible)"""
        print("\nüé† TEST CRITIQUE 4: V√©rification suppression carrousels...")
        
        # Note: Il n'y a pas d'endpoint direct pour lister les carrousels
        # On peut v√©rifier indirectement via les posts qui avaient des carrousels
        print("‚ÑπÔ∏è  Pas d'endpoint direct pour v√©rifier les carrousels")
        print("‚ÑπÔ∏è  La suppression des carrousels est confirm√©e par l'endpoint DELETE")
        return True
    
    def run_complete_test(self):
        """Ex√©cuter le test complet de suppression"""
        print("=" * 80)
        print("üóëÔ∏è TEST URGENT - Endpoint de suppression de tous les posts")
        print("=" * 80)
        print(f"Backend URL: {BACKEND_URL}")
        print(f"Credentials: {TEST_EMAIL} / {TEST_PASSWORD}")
        print(f"Timestamp: {datetime.now().isoformat()}")
        print("=" * 80)
        
        # √âtape 1: Authentification
        if not self.authenticate():
            print("\n‚ùå TEST √âCHOU√â: Impossible de s'authentifier")
            return False
        
        # √âtape 2: √âtat avant suppression
        posts_before = self.get_posts_before_deletion()
        used_media_before, used_media_ids_before = self.get_media_before_deletion()
        
        print(f"\nüìä √âTAT AVANT SUPPRESSION:")
        print(f"   Posts existants: {posts_before}")
        print(f"   M√©dias avec badges verts: {used_media_before}")
        
        # √âtape 3: Suppression
        delete_success, deleted_posts, deleted_carousels, reset_flags = self.delete_all_posts()
        if not delete_success:
            print("\n‚ùå TEST √âCHOU√â: Impossible de supprimer les posts")
            return False
        
        # √âtape 4: V√©rifications post-suppression
        posts_deleted = self.verify_posts_deletion()
        badges_reset = self.verify_badges_reset(reset_flags)
        carousels_deleted = self.verify_carousels_deletion()
        
        # R√©sum√© final
        print("\n" + "=" * 80)
        print("üìã R√âSUM√â DU TEST DE SUPPRESSION")
        print("=" * 80)
        print(f"Posts avant suppression: {posts_before}")
        print(f"Posts supprim√©s (selon API): {deleted_posts}")
        print(f"Carrousels supprim√©s: {deleted_carousels}")
        print(f"Flags m√©dias reset: {reset_flags}")
        print(f"M√©dias avec badges avant: {used_media_before}")
        print("")
        print("R√âSULTATS DES V√âRIFICATIONS:")
        print(f"‚úÖ Endpoint DELETE r√©pond: OUI" if delete_success else "‚ùå Endpoint DELETE r√©pond: NON")
        print(f"‚úÖ Posts effectivement supprim√©s: OUI" if posts_deleted else "‚ùå Posts effectivement supprim√©s: NON")
        print(f"‚úÖ Badges used_in_posts reset: OUI" if badges_reset else "‚ùå Badges used_in_posts reset: NON")
        print(f"‚úÖ Carrousels supprim√©s: OUI" if carousels_deleted else "‚ùå Carrousels supprim√©s: NON")
        
        # Conclusion
        all_tests_passed = delete_success and posts_deleted and badges_reset and carousels_deleted
        
        if all_tests_passed:
            print("\nüéâ CONCLUSION: ENDPOINT DELETE FONCTIONNE CORRECTEMENT")
            print("‚úÖ Tous les posts ont √©t√© supprim√©s")
            print("‚úÖ Tous les badges verts ont disparu")
            print("‚úÖ Les carrousels ont √©t√© supprim√©s")
            print("‚úÖ L'interface devrait maintenant √™tre vide")
        else:
            print("\n‚ùå CONCLUSION: PROBL√àMES D√âTECT√âS AVEC L'ENDPOINT DELETE")
            
            if not posts_deleted:
                print("‚ùå PROBL√àME PRINCIPAL: Les posts ne sont pas supprim√©s effectivement")
                print("   ‚Üí V√©rifier la requ√™te MongoDB dans l'endpoint")
                print("   ‚Üí V√©rifier que owner_id correspond au user_id")
                print(f"   ‚Üí User ID utilis√©: {self.user_id}")
            
            if not badges_reset:
                print("‚ùå PROBL√àME BADGES: Les flags used_in_posts ne sont pas reset")
                print("   ‚Üí V√©rifier la requ√™te de mise √† jour des m√©dias")
            
            print("\nüîç DEBUGGING REQUIS:")
            print("   1. V√©rifier les logs backend pendant la suppression")
            print("   2. V√©rifier la collection MongoDB generated_posts")
            print("   3. V√©rifier les requ√™tes MongoDB execut√©es")
            print("   4. Comparer owner_id vs user_id dans les collections")
        
        return all_tests_passed

def main():
    """Point d'entr√©e principal"""
    test = DeletePostsTest()
    success = test.run_complete_test()
    
    if success:
        print("\nüéâ TEST TERMIN√â AVEC SUCC√àS")
        sys.exit(0)
    else:
        print("\nüí• TEST √âCHOU√â - PROBL√àMES D√âTECT√âS")
        sys.exit(1)

if __name__ == "__main__":
    main()