#!/usr/bin/env python3
"""
üéØ DIAGNOSTIC CALLBACK FACEBOOK EN TEMPS R√âEL
Test complet pour diagnostiquer pourquoi le callback Facebook ne fonctionne pas
alors qu'Instagram fonctionne.

Identifiants: lperpere@yahoo.fr / L@Reunion974!
"""

import requests
import json
import time
from datetime import datetime
import urllib.parse

# Configuration
BACKEND_URL = "https://claire-marcus-app-1.preview.emergentagent.com/api"
EMAIL = "lperpere@yahoo.fr"
PASSWORD = "L@Reunion974!"

class FacebookCallbackDiagnostic:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_id = None
        
    def authenticate(self):
        """Authentification avec les identifiants fournis"""
        print("üîê √âTAPE 1: Authentification...")
        
        auth_data = {
            "email": EMAIL,
            "password": PASSWORD
        }
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login-robust", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.user_id = data.get("user_id")
                self.session.headers.update({"Authorization": f"Bearer {self.token}"})
                print(f"‚úÖ Authentification r√©ussie - User ID: {self.user_id}")
                return True
            else:
                print(f"‚ùå √âchec authentification: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur authentification: {e}")
            return False
    
    def check_social_connections_state(self):
        """V√©rifier l'√©tat actuel des connexions sociales"""
        print("\nüîç √âTAPE 2: V√©rification √©tat connexions sociales...")
        
        try:
            # V√©rifier les connexions via l'endpoint de debug
            response = self.session.get(f"{BACKEND_URL}/debug/social-connections")
            
            if response.status_code == 200:
                data = response.json()
                print("üìä √âtat des connexions sociales:")
                print(f"   - Connexions actives: {data.get('active_connections', 0)}")
                print(f"   - Connexions Facebook: {data.get('facebook_connections', 0)}")
                print(f"   - Connexions Instagram: {data.get('instagram_connections', 0)}")
                
                # D√©tails des collections
                collections = data.get('collections_analysis', {})
                for collection_name, info in collections.items():
                    print(f"   - Collection {collection_name}: {info.get('count', 0)} connexions")
                
                return data
            else:
                print(f"‚ùå Impossible de r√©cup√©rer l'√©tat des connexions: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur v√©rification connexions: {e}")
            return None
    
    def test_facebook_auth_url_generation(self):
        """Tester la g√©n√©ration d'URL d'authentification Facebook"""
        print("\nüîó √âTAPE 3: Test g√©n√©ration URL d'authentification Facebook...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/social/facebook/auth-url")
            
            if response.status_code == 200:
                data = response.json()
                auth_url = data.get('auth_url', '')
                state = data.get('state', '')
                
                print(f"‚úÖ URL d'authentification g√©n√©r√©e:")
                print(f"   - URL: {auth_url[:100]}...")
                print(f"   - State: {state}")
                
                # Analyser les param√®tres de l'URL
                parsed_url = urllib.parse.urlparse(auth_url)
                params = urllib.parse.parse_qs(parsed_url.query)
                
                print("üìã Param√®tres de l'URL:")
                for key, value in params.items():
                    print(f"   - {key}: {value[0] if value else 'N/A'}")
                
                return auth_url, state
            else:
                print(f"‚ùå √âchec g√©n√©ration URL: {response.status_code} - {response.text}")
                return None, None
                
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration URL: {e}")
            return None, None
    
    def test_facebook_callback_endpoint(self, state=None):
        """Tester l'endpoint de callback Facebook directement"""
        print("\nüéØ √âTAPE 4: Test direct de l'endpoint callback Facebook...")
        
        # Utiliser un state appropri√© si fourni
        if not state:
            state = f"test_state_{int(time.time())}|{self.user_id}"
        
        # Param√®tres de test pour simuler un callback Facebook
        test_params = {
            "code": "test_authorization_code_123",
            "state": state
        }
        
        try:
            # Test sans param√®tres (v√©rifier que l'endpoint existe)
            print("   üîç Test 1: Endpoint accessible...")
            response = self.session.get(f"{BACKEND_URL}/social/facebook/callback")
            print(f"   - Status sans param√®tres: {response.status_code}")
            
            # Test avec param√®tres de callback
            print("   üîç Test 2: Callback avec param√®tres...")
            response = self.session.get(f"{BACKEND_URL}/social/facebook/callback", params=test_params)
            print(f"   - Status avec param√®tres: {response.status_code}")
            print(f"   - Response headers: {dict(response.headers)}")
            
            if response.status_code in [302, 307]:
                redirect_url = response.headers.get('Location', 'N/A')
                print(f"   - Redirection vers: {redirect_url}")
            
            return response.status_code
            
        except Exception as e:
            print(f"‚ùå Erreur test callback: {e}")
            return None
    
    def test_instagram_callback_comparison(self):
        """Tester le callback Instagram pour comparaison"""
        print("\nüì± √âTAPE 5: Test callback Instagram (pour comparaison)...")
        
        state = f"test_state_{int(time.time())}|{self.user_id}"
        test_params = {
            "code": "test_instagram_code_123",
            "state": state
        }
        
        try:
            response = self.session.get(f"{BACKEND_URL}/social/instagram/callback", params=test_params)
            print(f"   - Status Instagram callback: {response.status_code}")
            
            if response.status_code in [302, 307]:
                redirect_url = response.headers.get('Location', 'N/A')
                print(f"   - Redirection Instagram vers: {redirect_url}")
            
            return response.status_code
            
        except Exception as e:
            print(f"‚ùå Erreur test Instagram callback: {e}")
            return None
    
    def analyze_environment_variables(self):
        """Analyser les variables d'environnement Facebook"""
        print("\nüîß √âTAPE 6: Analyse configuration Facebook...")
        
        try:
            # Tester l'endpoint de debug de configuration (s'il existe)
            response = self.session.get(f"{BACKEND_URL}/test/config-debug")
            
            if response.status_code == 200:
                data = response.json()
                print("üìã Configuration Facebook:")
                
                facebook_config = data.get('facebook', {})
                for key, value in facebook_config.items():
                    if 'secret' in key.lower():
                        print(f"   - {key}: {'‚úÖ Configur√©' if value else '‚ùå Manquant'}")
                    else:
                        print(f"   - {key}: {value}")
                
                return data
            else:
                print(f"‚ö†Ô∏è Endpoint de debug config non disponible: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible d'analyser la configuration: {e}")
            return None
    
    def test_token_exchange_simulation(self):
        """Simuler l'√©change de token Facebook"""
        print("\nüîÑ √âTAPE 7: Simulation √©change de token Facebook...")
        
        # Ceci est une simulation - nous ne pouvons pas faire un vrai √©change sans code valide
        facebook_token_url = "https://graph.facebook.com/v20.0/oauth/access_token"
        
        print(f"   - URL d'√©change de token: {facebook_token_url}")
        print("   - ‚ö†Ô∏è Simulation seulement (pas de code valide disponible)")
        
        # V√©rifier si l'API Facebook est accessible
        try:
            test_response = requests.get("https://graph.facebook.com/v20.0/me", timeout=5)
            print(f"   - API Facebook accessible: {test_response.status_code}")
        except Exception as e:
            print(f"   - ‚ö†Ô∏è Probl√®me d'acc√®s API Facebook: {e}")
    
    def check_backend_logs_for_facebook(self):
        """V√©rifier les logs backend pour les erreurs Facebook"""
        print("\nüìã √âTAPE 8: V√©rification logs backend Facebook...")
        
        try:
            # Simuler une tentative de callback pour g√©n√©rer des logs
            print("   üîç G√©n√©ration de logs via tentative callback...")
            
            state = f"diagnostic_{int(time.time())}|{self.user_id}"
            test_params = {
                "code": "AQD_diagnostic_test_code_123",
                "state": state,
                "error": None
            }
            
            # Faire l'appel pour g√©n√©rer des logs
            response = self.session.get(f"{BACKEND_URL}/social/facebook/callback", params=test_params)
            
            print(f"   - Callback test effectu√©: {response.status_code}")
            print("   - ‚ö†Ô∏è V√©rifiez les logs backend avec: tail -f /var/log/supervisor/backend.out.log")
            print("   - Recherchez: 'Facebook OAuth callback' dans les logs")
            
            return response.status_code
            
        except Exception as e:
            print(f"   ‚ùå Erreur g√©n√©ration logs: {e}")
            return None
    
    def run_complete_diagnostic(self):
        """Ex√©cuter le diagnostic complet"""
        print("üö® DIAGNOSTIC CALLBACK FACEBOOK EN TEMPS R√âEL")
        print("=" * 60)
        print(f"Timestamp: {datetime.now().isoformat()}")
        print(f"Backend URL: {BACKEND_URL}")
        print(f"Identifiants: {EMAIL}")
        print()
        
        # √âtape 1: Authentification
        if not self.authenticate():
            print("‚ùå DIAGNOSTIC ARR√äT√â - √âchec authentification")
            return
        
        # √âtape 2: √âtat des connexions
        connections_state = self.check_social_connections_state()
        
        # √âtape 3: G√©n√©ration URL Facebook
        auth_url, state = self.test_facebook_auth_url_generation()
        
        # √âtape 4: Test callback Facebook
        facebook_callback_status = self.test_facebook_callback_endpoint(state)
        
        # √âtape 5: Test callback Instagram (comparaison)
        instagram_callback_status = self.test_instagram_callback_comparison()
        
        # √âtape 6: Configuration
        config_data = self.analyze_environment_variables()
        
        # √âtape 7: Simulation √©change token
        self.test_token_exchange_simulation()
        
        # √âtape 8: G√©n√©ration de logs
        log_test_status = self.check_backend_logs_for_facebook()
        
        # R√©sum√© du diagnostic
        print("\n" + "=" * 60)
        print("üìã R√âSUM√â DU DIAGNOSTIC")
        print("=" * 60)
        
        print(f"‚úÖ Authentification: {'OK' if self.token else '√âCHEC'}")
        print(f"üìä Connexions sociales: {connections_state.get('active_connections', 0) if connections_state else 'N/A'} actives")
        print(f"üîó URL Facebook: {'OK' if auth_url else '√âCHEC'}")
        print(f"üéØ Callback Facebook: {facebook_callback_status if facebook_callback_status else '√âCHEC'}")
        print(f"üì± Callback Instagram: {instagram_callback_status if instagram_callback_status else '√âCHEC'}")
        print(f"üîß Configuration: {'OK' if config_data else 'PARTIELLE'}")
        print(f"üìã Logs g√©n√©r√©s: {'OK' if log_test_status else '√âCHEC'}")
        
        # Diagnostic des probl√®mes identifi√©s
        print("\nüîç PROBL√àMES IDENTIFI√âS:")
        
        if not auth_url:
            print("‚ùå CRITIQUE: Impossible de g√©n√©rer l'URL d'authentification Facebook")
        
        if facebook_callback_status != instagram_callback_status:
            print(f"‚ö†Ô∏è DIFF√âRENCE: Facebook callback ({facebook_callback_status}) vs Instagram ({instagram_callback_status})")
        
        if connections_state and connections_state.get('facebook_connections', 0) == 0:
            print("‚ö†Ô∏è AUCUNE CONNEXION FACEBOOK: Pas de connexions Facebook actives trouv√©es")
        
        print("\nüéØ RECOMMANDATIONS:")
        print("1. V√©rifier les logs backend pendant une tentative de connexion Facebook r√©elle")
        print("2. Comparer le flow Facebook vs Instagram dans le code")
        print("3. Tester avec un code d'autorisation Facebook valide")
        print("4. V√©rifier la configuration Facebook Developer Console")
        print("5. Analyser les diff√©rences de collection entre Instagram et Facebook")
        
        # Instructions pour l'utilisateur
        print("\nüìù INSTRUCTIONS POUR L'UTILISATEUR:")
        print("1. Tentez une connexion Facebook r√©elle sur l'interface")
        print("2. Pendant la tentative, surveillez les logs avec:")
        print("   tail -f /var/log/supervisor/backend.out.log | grep -i facebook")
        print("3. Recherchez sp√©cifiquement les messages 'Facebook OAuth callback'")
        print("4. Notez toute erreur d'√©change de token ou de sauvegarde")

if __name__ == "__main__":
    diagnostic = FacebookCallbackDiagnostic()
    diagnostic.run_complete_diagnostic()