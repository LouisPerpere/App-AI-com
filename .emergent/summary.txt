<analysis>
The trajectory details the AI engineer's work on the Claire et Marcus PWA. It began with enhancing the periodic notes system, which involved fixing a note editing bug, implementing monthly note functionality with month/year dropdowns, and adding backend models and database functions. This was followed by implementing robust frontend sorting logic for notes (monthly first, then chronological) and an automated backend cleanup process for expired notes.

Subsequent work focused on critical bug fixes and feature refinements. This included resolving a persistent Laurent Perpere vs My Own Watch data display issue by correcting database relationships and backend API endpoints. Significant effort was dedicated to fixing image display problems, specifically addressing Pillow library incompatibility, inconsistent data structures for old uploaded images (leading to their loss), and issues with thumbnail generation. The engineer then iterated on the image title editing functionality, moving it from thumbnails to the preview modal, and resolving virtual keyboard and context preservation bugs during title editing. The process culminated in implementing comprehensive title and context editing during the upload process and further refining title saving logic. The trajectory concludes with the user requesting a new operational title field, separate from the technical title, which the engineer has just begun to implement on the backend.
</analysis>

<product_requirements>
The Claire et Marcus PWA is an AI-powered SaaS for small businesses, automating social media content and profile management. Core features include reliable content CRUD via MongoDB, a 5-column content library grid with pop-up previews, 320px WEBP thumbnails, AI-powered website analysis (GPT-4o), a notes module, persistent business profiles, and robust authentication. Initial work involved UI/UX restoration, virtual keyboard fixes, and adding brand tone/posting frequency options. Recent explicit requests and the problems they solve include:
- **Periodic Notes System**: Enable monthly notes with month/year assignment, chronological sorting (always valid first), and automatic deletion of specific notes on the 5th of the following month.
- **Pixabay Integration**: Search and add royalty-free images to the library, with visual feedback.
- **Image Management**: Correct thumbnail/preview loading, EXIF orientation, resize uploads to 1024px/72dpi, optimize loading/caching, enable title editing for photos.
- **Business Profile Display**: Ensure My Own Watch business data is correctly displayed instead of user-specific data.
- **Frontend UI/UX**: Fix notes exceeding iPhone screen, invisible checkbox, virtual keyboard issues on input fields, preserve context during title editing.
- **Content Editing**: Edit photo titles from the preview page (not thumbnails), save title and context simultaneously, and edit title/context during the upload process.
- **New Operational Title**: Introduce an optional operational title field for content generation and display, separate from the technical title (filename), which is editable during upload and on display.
</product_requirements>

<key_technical_concepts>
- **Full-stack Development**: React.js (frontend), FastAPI (backend), MongoDB/GridFS (database).
- **Authentication**: JWT, ,  for API calls, token handling.
- **AI Integration**: GPT-4o for website analysis and content generation.
- **UI/UX**: Responsive design, virtual keyboard compatibility (uncontrolled inputs with ), Tailwind CSS.
- **API Interaction**: RESTful,  prefix, CORS.
- **Scheduled Tasks**: Python  for periodic operations (e.g., note deletion).
- **Image Processing**: Pillow for EXIF rotation, resizing, WEBP conversion, GridFS storage.
- **Data Persistence**: MongoDB (UUIDs for document IDs).
</key_technical_concepts>

<code_architecture>

-   ****: The main React component, rendering UI and handling logic.
    -   **Importance**: Orchestrates the entire application, including dashboard, content library, and notes.
    -   **Changes Made**: Heavily modified for periodic notes UI (states, checkbox, dropdowns, sorting logic, badges), content editing (title editing moved to preview modal, virtual keyboard fixes, context preservation, combined save), and upload flow (editable title/context pre-upload). It also handles business profile loading and display.
-   ****: Main stylesheet.
    -   **Importance**: Global and component-specific styling.
    -   **Changes Made**: Added styles for mobile/touch, specific note form fields, checkbox visibility, and title input border for better UX.
-   ****: Main FastAPI backend server.
    -   **Importance**: Defines API routes and Pydantic models.
    -   **Changes Made**: Updated  model for periodic notes, added Pixabay endpoints,  for title updates,  modified to fetch from ,  endpoint added.
-   ****: Handles MongoDB interactions.
    -   **Importance**: Centralized database operations.
    -   **Changes Made**:  and  functions modified to accept periodic note fields. Added  function for automatic cleanup.
-   ****: Manages background scheduled tasks.
    -   **Importance**: Executes periodic operations.
    -   **Changes Made**: Integrated  function into the main scheduling loop to run monthly.
-   ****: Handles thumbnail generation and image processing.
    -   **Importance**: Responsible for image resizing, EXIF handling, and WEBP conversion.
    -   **Changes Made**: Fixed Pillow 11.3.0  import incompatibility. Updated  for robust EXIF processing.
-   ****: Manages file uploads and serving media.
    -   **Importance**: Handles GridFS storage, image resizing, and media delivery.
    -   **Changes Made**: Fixed Pillow  import. Batch upload logic adjusted to ensure correct thumbnail generation, but old images were found to be lost due to inconsistent data.
-   ****: Manages thumbnail specific routes.
    -   **Importance**: Provides endpoints for accessing thumbnails.
    -   **Changes Made**:  was called with string UUIDs, but initially expected ObjectIDs, leading to thumbnail generation issues. Also had issues with synchronous/asynchronous collection access.
-   ****: Temporary migration script.
    -   **Importance**: Created to address field name incompatibilities, though it found no issues.
-   ****: Temporary script.
    -   **Importance**: Created to attempt to repair missing thumbnails, but failed due to loss of original image data.
</code_architecture>

<pending_tasks>
- Complete the backend implementation for the new operational title field (named ).
- Integrate the operational title into the frontend UI, making it editable during upload preview and in the content preview modal.
- Ensure the operational title is used for content generation.
- Implement conditional display: if operational title exists, display it on thumbnails; otherwise, fallback to the technical title (filename).
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was addressing a series of persistent bugs reported by the user related to image title editing and display. Specifically:
1.  **Save Button Bug**: The Sauvegarder (save) button in the image preview modal would revert the photo's title to its original upload state, despite recent attempts to fix the save logic.
2.  **Title Input Styling**: The editable title field in the preview modal lost its border on focus, creating uncertainty about its editability.
3.  **Date Display N/A**: The Ajout√© le (added on) date for images was showing N/A.

The AI engineer attempted to fix these:
-   **Title Save Logic**: Debugged  in  to compare the current title with the original title and removed automatic content reloading after save to prevent unintended overwrites.
-   **Title Input CSS**: Modified the CSS in  to ensure the title input field retains a visible purple border () on focus.
-   **Date Display**: Updated  to check multiple date fields (, , ) for media items, displaying Date inconnue if none are found.

Despite these efforts, the user reported that the title still reverted, prompting a new architectural decision. The current work is the direct response to this feedback, where the user has requested to introduce a new operational title field, distinct from the technical title (filename). The AI engineer has just started implementing this by planning to add the  field to the backend.
</current_work>

<optional_next_step>
Add the  field to the  Pydantic model in .
</optional_next_step>
