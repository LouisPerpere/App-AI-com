#!/usr/bin/env python3
"""
üéØ PHASE 3 TESTING - AUTOMATIC PERIODIC NOTES CLEANUP

TEST OBJECTIVE: Validate the automatic cleanup system for expired periodic notes.

TESTING STRATEGY:
1. **Create test notes with specific dates** to simulate expired notes
2. **Test manual cleanup endpoint** to verify functionality
3. **Validate cleanup logic** - notes should be deleted on 5th of following month
4. **Test edge cases** - monthly notes should NOT be deleted

SPECIFIC TEST SCENARIOS:
‚úÖ **Test 1**: Create specific month notes for December 2024 (should be deleted if today is January 5+ 2025)
‚úÖ **Test 2**: Create specific month notes for current month-1 (should be deleted if today is 5+)
‚úÖ **Test 3**: Create monthly notes - these should NEVER be deleted
‚úÖ **Test 4**: Manual trigger cleanup endpoint POST /api/notes/cleanup-expired
‚úÖ **Test 5**: Verify only specific month notes are deleted, monthly notes remain
‚úÖ **Test 6**: Test cleanup logic timing (only runs on 5+ of month)

AUTHENTICATION: lperpere@yahoo.fr / L@Reunion974!
BACKEND URL: https://social-ai-manager-12.preview.emergentagent.com/api

EXPECTED BEHAVIOR:
- Notes for January 2025 should be deleted on February 5, 2025 
- Notes for December 2024 should be deleted on January 5, 2025
- Monthly notes (is_monthly_note=true) should never be deleted
- Cleanup should only run on/after 5th of each month

SUCCESS CRITERIA: Cleanup system correctly identifies and deletes only expired specific month notes.
"""

import requests
import json
import sys
from datetime import datetime, date
from dateutil.relativedelta import relativedelta

class PeriodicNotesCleanupTester:
    def __init__(self):
        self.base_url = "https://social-ai-manager-12.preview.emergentagent.com/api"
        self.session = requests.Session()
        self.access_token = None
        self.user_id = None
        self.test_results = []
        self.created_notes = []  # Track created notes for cleanup
        self.test_notes_data = []  # Store test notes with expected cleanup behavior
        
    def log_test(self, step, description, success, details=""):
        """Log test results"""
        status = "‚úÖ" if success else "‚ùå"
        result = {
            "step": step,
            "description": description,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status} Step {step}: {description}")
        if details:
            print(f"   Details: {details}")
        if not success:
            print(f"   ‚ùå FAILED: {details}")
        print()

    def authenticate(self):
        """Step 1: Authenticate with the backend"""
        try:
            auth_data = {
                "email": "lperpere@yahoo.fr",
                "password": "L@Reunion974!"
            }
            
            response = self.session.post(
                f"{self.base_url}/auth/login-robust",
                json=auth_data,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.access_token = data.get("access_token")
                self.user_id = data.get("user_id")
                
                # Set authorization header for future requests
                self.session.headers.update({
                    "Authorization": f"Bearer {self.access_token}",
                    "Content-Type": "application/json"
                })
                
                self.log_test(1, "Authentication", True, 
                    f"User ID: {self.user_id}, JWT token obtained and configured")
                return True
            else:
                self.log_test(1, "Authentication", False, 
                    f"Status: {response.status_code}, Response: {response.text}")
                return False
                
        except Exception as e:
            self.log_test(1, "Authentication", False, f"Exception: {str(e)}")
            return False

    def create_test_notes_for_cleanup(self):
        """Step 2: Create test notes with specific dates to simulate expired notes"""
        try:
            today = date.today()
            current_month = today.month
            current_year = today.year
            
            # Calculate previous month
            prev_month_date = today - relativedelta(months=1)
            prev_month = prev_month_date.month
            prev_year = prev_month_date.year
            
            # Define test notes for cleanup testing
            test_notes = [
                {
                    "name": "December 2024 Specific Note (Should be deleted if Jan 5+ 2025)",
                    "data": {
                        "description": "Note sp√©cifique D√©cembre 2024 - √Ä supprimer",
                        "content": "Cette note de D√©cembre 2024 devrait √™tre supprim√©e si nous sommes apr√®s le 5 Janvier 2025",
                        "priority": "normal",
                        "is_monthly_note": False,
                        "note_month": 12,
                        "note_year": 2024
                    },
                    "should_be_deleted": today >= date(2025, 1, 5),
                    "category": "expired_specific"
                },
                {
                    "name": f"Previous Month ({prev_month}/{prev_year}) Specific Note (Should be deleted if today is 5+)",
                    "data": {
                        "description": f"Note sp√©cifique {prev_month}/{prev_year} - √Ä supprimer",
                        "content": f"Cette note de {prev_month}/{prev_year} devrait √™tre supprim√©e si nous sommes apr√®s le 5 du mois actuel",
                        "priority": "high",
                        "is_monthly_note": False,
                        "note_month": prev_month,
                        "note_year": prev_year
                    },
                    "should_be_deleted": today.day >= 5,
                    "category": "expired_specific"
                },
                {
                    "name": "Monthly Note High Priority (Should NEVER be deleted)",
                    "data": {
                        "description": "Note mensuelle haute priorit√© - PERMANENTE",
                        "content": "Cette note mensuelle ne devrait JAMAIS √™tre supprim√©e par le syst√®me de nettoyage",
                        "priority": "high",
                        "is_monthly_note": True,
                        "note_month": None,
                        "note_year": None
                    },
                    "should_be_deleted": False,
                    "category": "monthly_permanent"
                },
                {
                    "name": "Monthly Note Normal Priority (Should NEVER be deleted)",
                    "data": {
                        "description": "Note mensuelle priorit√© normale - PERMANENTE",
                        "content": "Cette note mensuelle ne devrait JAMAIS √™tre supprim√©e par le syst√®me de nettoyage",
                        "priority": "normal",
                        "is_monthly_note": True,
                        "note_month": None,
                        "note_year": None
                    },
                    "should_be_deleted": False,
                    "category": "monthly_permanent"
                },
                {
                    "name": f"Current Month ({current_month}/{current_year}) Specific Note (Should NOT be deleted)",
                    "data": {
                        "description": f"Note sp√©cifique {current_month}/{current_year} - ACTIVE",
                        "content": f"Cette note du mois actuel ({current_month}/{current_year}) ne devrait PAS √™tre supprim√©e",
                        "priority": "medium",
                        "is_monthly_note": False,
                        "note_month": current_month,
                        "note_year": current_year
                    },
                    "should_be_deleted": False,
                    "category": "current_specific"
                },
                {
                    "name": "Future Month (March 2025) Specific Note (Should NOT be deleted)",
                    "data": {
                        "description": "Note sp√©cifique Mars 2025 - FUTURE",
                        "content": "Cette note future (Mars 2025) ne devrait PAS √™tre supprim√©e",
                        "priority": "low",
                        "is_monthly_note": False,
                        "note_month": 3,
                        "note_year": 2025
                    },
                    "should_be_deleted": False,
                    "category": "future_specific"
                }
            ]
            
            created_count = 0
            for note_info in test_notes:
                try:
                    response = self.session.post(
                        f"{self.base_url}/notes",
                        json=note_info["data"],
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        note = data.get("note", {})
                        note_id = note.get("note_id")
                        
                        if note_id:
                            self.created_notes.append(note_id)
                            # Store note data with expected cleanup behavior
                            self.test_notes_data.append({
                                "note_id": note_id,
                                "name": note_info["name"],
                                "should_be_deleted": note_info["should_be_deleted"],
                                "category": note_info["category"],
                                "is_monthly_note": note.get("is_monthly_note"),
                                "note_month": note.get("note_month"),
                                "note_year": note.get("note_year"),
                                "priority": note.get("priority"),
                                "description": note.get("description")
                            })
                            created_count += 1
                            deletion_status = "SHOULD BE DELETED" if note_info["should_be_deleted"] else "should remain"
                            print(f"   ‚úÖ Created: {note_info['name']} - ID: {note_id} ({deletion_status})")
                    else:
                        print(f"   ‚ùå Failed to create: {note_info['name']} - Status: {response.status_code}")
                        
                except Exception as e:
                    print(f"   ‚ùå Error creating {note_info['name']}: {str(e)}")
            
            success = created_count == len(test_notes)
            details = f"Successfully created {created_count}/{len(test_notes)} test notes for cleanup validation"
            details += f"\n   Today: {today.strftime('%Y-%m-%d')} (Day {today.day} of month)"
            details += f"\n   Expected deletions based on cleanup logic and current date"
            
            self.log_test(2, "Create Test Notes for Cleanup", success, details)
            return success
            
        except Exception as e:
            self.log_test(2, "Create Test Notes for Cleanup", False, f"Exception: {str(e)}")
            return False

    def get_notes_before_cleanup(self):
        """Step 3: Get all notes before cleanup to establish baseline"""
        try:
            response = self.session.get(f"{self.base_url}/notes", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                all_notes = data.get("notes", [])
                
                # Count notes by category
                monthly_notes = [n for n in all_notes if n.get("is_monthly_note")]
                specific_notes = [n for n in all_notes if not n.get("is_monthly_note")]
                
                # Find our test notes
                our_test_notes = []
                for note in all_notes:
                    for test_note in self.test_notes_data:
                        if note.get("note_id") == test_note["note_id"]:
                            our_test_notes.append(note)
                            break
                
                success = len(our_test_notes) == len(self.test_notes_data)
                details = f"Found {len(all_notes)} total notes before cleanup"
                details += f"\n   Monthly notes: {len(monthly_notes)}"
                details += f"\n   Specific month notes: {len(specific_notes)}"
                details += f"\n   Our test notes found: {len(our_test_notes)}/{len(self.test_notes_data)}"
                
                self.log_test(3, "Get Notes Before Cleanup", success, details)
                return success, all_notes
            else:
                self.log_test(3, "Get Notes Before Cleanup", False, 
                    f"Status: {response.status_code}, Response: {response.text}")
                return False, []
                
        except Exception as e:
            self.log_test(3, "Get Notes Before Cleanup", False, f"Exception: {str(e)}")
            return False, []

    def trigger_manual_cleanup(self):
        """Step 4: Trigger manual cleanup endpoint"""
        try:
            response = self.session.post(
                f"{self.base_url}/notes/cleanup-expired",
                json={},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                message = data.get("message", "")
                result = data.get("result", {})
                
                self.log_test(4, "Trigger Manual Cleanup", True, 
                    f"Cleanup endpoint called successfully. Message: {message}, Result: {result}")
                return True, result
            else:
                self.log_test(4, "Trigger Manual Cleanup", False, 
                    f"Status: {response.status_code}, Response: {response.text}")
                return False, {}
                
        except Exception as e:
            self.log_test(4, "Trigger Manual Cleanup", False, f"Exception: {str(e)}")
            return False, {}

    def verify_cleanup_results(self, notes_before_cleanup):
        """Step 5: Verify cleanup results - check which notes were deleted"""
        try:
            response = self.session.get(f"{self.base_url}/notes", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                notes_after_cleanup = data.get("notes", [])
                
                # Create sets of note IDs for comparison
                notes_before_ids = {note.get("note_id") for note in notes_before_cleanup}
                notes_after_ids = {note.get("note_id") for note in notes_after_cleanup}
                deleted_note_ids = notes_before_ids - notes_after_ids
                
                # Analyze our test notes
                correct_deletions = 0
                incorrect_deletions = 0
                correct_preservations = 0
                incorrect_preservations = 0
                
                for test_note in self.test_notes_data:
                    note_id = test_note["note_id"]
                    was_deleted = note_id in deleted_note_ids
                    should_be_deleted = test_note["should_be_deleted"]
                    
                    if was_deleted and should_be_deleted:
                        correct_deletions += 1
                        print(f"   ‚úÖ CORRECTLY DELETED: {test_note['name']}")
                    elif not was_deleted and not should_be_deleted:
                        correct_preservations += 1
                        print(f"   ‚úÖ CORRECTLY PRESERVED: {test_note['name']}")
                    elif was_deleted and not should_be_deleted:
                        incorrect_deletions += 1
                        print(f"   ‚ùå INCORRECTLY DELETED: {test_note['name']} (should have been preserved)")
                    elif not was_deleted and should_be_deleted:
                        incorrect_preservations += 1
                        print(f"   ‚ùå INCORRECTLY PRESERVED: {test_note['name']} (should have been deleted)")
                
                # Check monthly notes specifically - they should NEVER be deleted
                monthly_notes_before = [n for n in notes_before_cleanup if n.get("is_monthly_note")]
                monthly_notes_after = [n for n in notes_after_cleanup if n.get("is_monthly_note")]
                monthly_deleted = len(monthly_notes_before) - len(monthly_notes_after)
                
                success = (incorrect_deletions == 0 and incorrect_preservations == 0 and monthly_deleted == 0)
                
                details = f"Cleanup Results Analysis:"
                details += f"\n   Total notes before: {len(notes_before_cleanup)}"
                details += f"\n   Total notes after: {len(notes_after_cleanup)}"
                details += f"\n   Notes deleted: {len(deleted_note_ids)}"
                details += f"\n   Correct deletions: {correct_deletions}"
                details += f"\n   Correct preservations: {correct_preservations}"
                details += f"\n   Incorrect deletions: {incorrect_deletions}"
                details += f"\n   Incorrect preservations: {incorrect_preservations}"
                details += f"\n   Monthly notes deleted: {monthly_deleted} (should be 0)"
                
                if success:
                    details += f"\n   ‚úÖ Cleanup logic working correctly - only expired specific month notes deleted"
                else:
                    details += f"\n   ‚ùå Cleanup logic has issues - incorrect deletions or preservations detected"
                
                self.log_test(5, "Verify Cleanup Results", success, details)
                return success
            else:
                self.log_test(5, "Verify Cleanup Results", False, 
                    f"Status: {response.status_code}, Response: {response.text}")
                return False
                
        except Exception as e:
            self.log_test(5, "Verify Cleanup Results", False, f"Exception: {str(e)}")
            return False

    def test_cleanup_timing_logic(self):
        """Step 6: Test cleanup logic timing (should only run on 5+ of month)"""
        try:
            today = date.today()
            current_day = today.day
            
            # The cleanup logic should be based on current date
            should_cleanup_run = current_day >= 5
            
            # We already triggered the cleanup, so we can analyze if it behaved correctly
            # based on the current date
            
            details = f"Cleanup Timing Logic Analysis:"
            details += f"\n   Current date: {today.strftime('%Y-%m-%d')}"
            details += f"\n   Current day of month: {current_day}"
            details += f"\n   Should cleanup run today: {should_cleanup_run} (day >= 5)"
            
            if should_cleanup_run:
                details += f"\n   ‚úÖ Cleanup should run today - testing cleanup functionality"
                success = True
            else:
                details += f"\n   ‚ö†Ô∏è Cleanup should NOT run today (before 5th) - but we tested manual trigger"
                details += f"\n   ‚ÑπÔ∏è Manual trigger allows testing regardless of date"
                success = True  # Manual trigger is always allowed for testing
            
            # Additional timing information
            details += f"\n   Cleanup rules:"
            details += f"\n   - December 2024 notes: Delete on/after January 5, 2025"
            details += f"\n   - January 2025 notes: Delete on/after February 5, 2025"
            details += f"\n   - Monthly notes: NEVER delete"
            
            self.log_test(6, "Test Cleanup Timing Logic", success, details)
            return success
            
        except Exception as e:
            self.log_test(6, "Test Cleanup Timing Logic", False, f"Exception: {str(e)}")
            return False

    def cleanup_remaining_test_notes(self):
        """Clean up any remaining test notes"""
        print("\nüßπ Cleaning up remaining test notes...")
        
        # Get current notes to see what's left
        try:
            response = self.session.get(f"{self.base_url}/notes", timeout=30)
            if response.status_code == 200:
                data = response.json()
                current_notes = data.get("notes", [])
                
                # Find our test notes that are still there
                remaining_test_notes = []
                for note in current_notes:
                    for test_note in self.test_notes_data:
                        if note.get("note_id") == test_note["note_id"]:
                            remaining_test_notes.append(note.get("note_id"))
                            break
                
                cleaned = 0
                for note_id in remaining_test_notes:
                    try:
                        delete_response = self.session.delete(
                            f"{self.base_url}/notes/{note_id}",
                            timeout=30
                        )
                        if delete_response.status_code == 200:
                            cleaned += 1
                            print(f"   ‚úÖ Deleted remaining test note {note_id}")
                        else:
                            print(f"   ‚ö†Ô∏è Failed to delete note {note_id}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Error deleting note {note_id}: {str(e)}")
                
                print(f"üßπ Cleanup complete: {cleaned}/{len(remaining_test_notes)} remaining notes deleted\n")
                
        except Exception as e:
            print(f"   ‚ùå Error during cleanup: {str(e)}")

    def run_all_tests(self):
        """Run all periodic notes cleanup tests"""
        print("üéØ PHASE 3 TESTING - AUTOMATIC PERIODIC NOTES CLEANUP")
        print("=" * 80)
        print(f"Backend URL: {self.base_url}")
        print(f"Test started at: {datetime.now().isoformat()}")
        print(f"Current date: {date.today().strftime('%Y-%m-%d')}")
        print()
        
        try:
            # Step 1: Authentication
            if not self.authenticate():
                return False
            
            # Step 2: Create test notes for cleanup
            if not self.create_test_notes_for_cleanup():
                return False
            
            # Step 3: Get notes before cleanup
            success, notes_before = self.get_notes_before_cleanup()
            if not success:
                return False
            
            # Step 4: Trigger manual cleanup
            cleanup_success, cleanup_result = self.trigger_manual_cleanup()
            if not cleanup_success:
                return False
            
            # Step 5: Verify cleanup results
            if not self.verify_cleanup_results(notes_before):
                return False
            
            # Step 6: Test cleanup timing logic
            if not self.test_cleanup_timing_logic():
                return False
            
            # Calculate success rate
            successful_tests = sum(1 for result in self.test_results if result["success"])
            total_tests = len(self.test_results)
            success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
            
            print("=" * 80)
            print("üéØ PERIODIC NOTES CLEANUP TEST SUMMARY")
            print("=" * 80)
            print(f"Total Tests: {total_tests}")
            print(f"Successful: {successful_tests}")
            print(f"Failed: {total_tests - successful_tests}")
            print(f"Success Rate: {success_rate:.1f}%")
            print()
            
            # Print detailed results
            for result in self.test_results:
                status = "‚úÖ" if result["success"] else "‚ùå"
                print(f"{status} Step {result['step']}: {result['description']}")
                if result["details"]:
                    print(f"   {result['details']}")
            
            print()
            
            # Determine overall result
            if success_rate >= 85:
                print("üéâ PERIODIC NOTES CLEANUP TEST COMPLETED SUCCESSFULLY")
                print("‚úÖ Cleanup system correctly identifies and deletes only expired specific month notes")
                print("‚úÖ Monthly notes are properly preserved (never deleted)")
                print("‚úÖ Current and future specific month notes are preserved")
                print("‚úÖ Manual cleanup endpoint is functional")
                print("‚úÖ Cleanup timing logic is working correctly")
                overall_success = True
            else:
                print("üö® PERIODIC NOTES CLEANUP TEST COMPLETED WITH ISSUES")
                print("‚ùå Cleanup system has critical issues that need to be resolved")
                overall_success = False
            
            return overall_success
            
        finally:
            # Always clean up remaining test notes
            if self.test_notes_data:
                self.cleanup_remaining_test_notes()

def main():
    """Main test execution"""
    tester = PeriodicNotesCleanupTester()
    success = tester.run_all_tests()
    
    if success:
        print("üéØ CONCLUSION: Periodic Notes Cleanup Test PASSED - Automatic cleanup system is working correctly")
        sys.exit(0)
    else:
        print("üö® CONCLUSION: Periodic Notes Cleanup Test FAILED - Cleanup system needs fixes")
        sys.exit(1)

if __name__ == "__main__":
    main()