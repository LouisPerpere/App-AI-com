#!/usr/bin/env python3
"""
üéØ DIAGNOSTIC G√âN√âRATION POSTS INCORRECTE
Test sp√©cifique pour diagnostiquer pourquoi tous les posts g√©n√©r√©s pour septembre 
ont le label "Instagram" au lieu de "Facebook" alors que Facebook est connect√© 
et Instagram d√©connect√©.

Identifiants: lperpere@yahoo.fr / L@Reunion974!
"""

import requests
import json
import sys
import time
from datetime import datetime

class PostGenerationDiagnostic:
    def __init__(self):
        # Use the frontend environment URL from .env
        self.base_url = "https://social-ai-planner-2.preview.emergentagent.com/api"
        self.session = requests.Session()
        self.token = None
        self.user_id = None
        self.credentials = {
            "email": "lperpere@yahoo.fr",
            "password": "L@Reunion974!"
        }
        
    def authenticate(self):
        """Authenticate with the API"""
        try:
            print(f"üîê Step 1: Authenticating with {self.credentials['email']}")
            
            response = self.session.post(
                f"{self.base_url}/auth/login-robust",
                json=self.credentials,
                headers={"Content-Type": "application/json"}
            )
            
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.user_id = data.get("user_id")
                
                # Set authorization header for all future requests
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}",
                    "Content-Type": "application/json"
                })
                
                print(f"   ‚úÖ Authentication successful")
                print(f"   User ID: {self.user_id}")
                return True
            else:
                print(f"   ‚ùå Authentication failed: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Authentication error: {str(e)}")
            return False
    
    def check_social_connections_state(self):
        """V√©rifier l'√©tat actuel des connexions sociales"""
        try:
            print(f"\nüîç Step 2: V√©rification √©tat des connexions sociales")
            print(f"   Endpoint: GET /api/debug/social-connections")
            
            response = self.session.get(f"{self.base_url}/debug/social-connections")
            
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                
                print(f"   ‚úÖ Diagnostic endpoint accessible")
                
                # Analyser les connexions
                connections = data.get("social_media_connections", [])
                old_connections = data.get("social_connections_old", [])
                
                print(f"   üìä √âTAT DES CONNEXIONS:")
                print(f"     Collection social_media_connections: {len(connections)} connexions")
                print(f"     Collection social_connections_old: {len(old_connections)} connexions")
                
                # Analyser les connexions actives
                facebook_active = [c for c in connections if c.get("platform") == "facebook" and c.get("active") == True]
                instagram_active = [c for c in connections if c.get("platform") == "instagram" and c.get("active") == True]
                facebook_inactive = [c for c in connections if c.get("platform") == "facebook" and c.get("active") == False]
                instagram_inactive = [c for c in connections if c.get("platform") == "instagram" and c.get("active") == False]
                
                print(f"     Facebook ACTIF: {len(facebook_active)}")
                print(f"     Instagram ACTIF: {len(instagram_active)}")
                print(f"     Facebook INACTIF: {len(facebook_inactive)}")
                print(f"     Instagram INACTIF: {len(instagram_inactive)}")
                
                # Analyser les anciennes connexions
                if old_connections:
                    old_facebook = [c for c in old_connections if c.get("platform") == "facebook"]
                    old_instagram = [c for c in old_connections if c.get("platform") == "instagram"]
                    print(f"     Anciennes connexions Facebook: {len(old_facebook)}")
                    print(f"     Anciennes connexions Instagram: {len(old_instagram)}")
                
                # D√©tails des connexions actives
                if facebook_active:
                    print(f"   üìã D√âTAILS FACEBOOK ACTIF:")
                    for i, conn in enumerate(facebook_active):
                        page_name = conn.get("page_name", "Unknown")
                        created_at = conn.get("created_at", "Unknown")
                        print(f"     {i+1}. Page: {page_name}, Cr√©√©: {created_at}")
                
                if instagram_active:
                    print(f"   üìã D√âTAILS INSTAGRAM ACTIF:")
                    for i, conn in enumerate(instagram_active):
                        page_name = conn.get("page_name", "Unknown")
                        created_at = conn.get("created_at", "Unknown")
                        print(f"     {i+1}. Page: {page_name}, Cr√©√©: {created_at}")
                
                return {
                    "facebook_active": len(facebook_active),
                    "instagram_active": len(instagram_active),
                    "facebook_inactive": len(facebook_inactive),
                    "instagram_inactive": len(instagram_inactive),
                    "connections_data": connections
                }
            else:
                print(f"   ‚ùå Failed to access diagnostic endpoint: {response.text}")
                return None
                
        except Exception as e:
            print(f"   ‚ùå Error checking social connections: {str(e)}")
            return None
    
    def analyze_september_posts(self):
        """Analyser les posts g√©n√©r√©s pour septembre"""
        try:
            print(f"\nüìù Step 3: Analyse des posts g√©n√©r√©s pour septembre")
            print(f"   Endpoint: GET /api/posts/generated")
            
            response = self.session.get(f"{self.base_url}/posts/generated")
            
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                posts = data.get("posts", [])
                
                print(f"   ‚úÖ Retrieved {len(posts)} total posts")
                
                # Filtrer les posts de septembre 2025
                september_posts = []
                for post in posts:
                    scheduled_date = post.get("scheduled_date", "")
                    if "2025-09" in scheduled_date or "septembre" in post.get("target_month", "").lower():
                        september_posts.append(post)
                
                print(f"   üìä POSTS DE SEPTEMBRE: {len(september_posts)} posts trouv√©s")
                
                if september_posts:
                    # Analyser la distribution des plateformes
                    facebook_posts = [p for p in september_posts if p.get("platform") == "facebook"]
                    instagram_posts = [p for p in september_posts if p.get("platform") == "instagram"]
                    
                    print(f"   üìä DISTRIBUTION PLATEFORMES SEPTEMBRE:")
                    print(f"     Posts Facebook: {len(facebook_posts)}")
                    print(f"     Posts Instagram: {len(instagram_posts)}")
                    
                    # Afficher les d√©tails des posts
                    print(f"   üìã D√âTAILS POSTS SEPTEMBRE:")
                    for i, post in enumerate(september_posts[:10]):  # Limiter √† 10 pour lisibilit√©
                        title = post.get("title", "Sans titre")[:50]
                        platform = post.get("platform", "Unknown")
                        date = post.get("scheduled_date", "No date")
                        status = post.get("status", "Unknown")
                        print(f"     {i+1}. [{platform.upper()}] {title}... | {date} | {status}")
                    
                    if len(september_posts) > 10:
                        print(f"     ... et {len(september_posts) - 10} autres posts")
                    
                    return {
                        "total_september": len(september_posts),
                        "facebook_september": len(facebook_posts),
                        "instagram_september": len(instagram_posts),
                        "september_posts": september_posts
                    }
                else:
                    print(f"   ‚ö†Ô∏è Aucun post de septembre trouv√©")
                    return {
                        "total_september": 0,
                        "facebook_september": 0,
                        "instagram_september": 0,
                        "september_posts": []
                    }
            else:
                print(f"   ‚ùå Failed to get generated posts: {response.text}")
                return None
                
        except Exception as e:
            print(f"   ‚ùå Error analyzing September posts: {str(e)}")
            return None
    
    def find_post_generation_endpoint(self):
        """Identifier l'endpoint de g√©n√©ration de posts"""
        try:
            print(f"\nüîç Step 4: Identification de l'endpoint de g√©n√©ration")
            
            # Tester plusieurs endpoints possibles
            possible_endpoints = [
                "/posts/generate",
                "/posts/generate-monthly",
                "/posts/create-batch",
                "/content/generate-posts"
            ]
            
            for endpoint in possible_endpoints:
                try:
                    print(f"   Testing: {endpoint}")
                    response = self.session.get(f"{self.base_url}{endpoint}")
                    print(f"     Status: {response.status_code}")
                    
                    if response.status_code in [200, 405, 422]:  # 405 = Method not allowed, 422 = Validation error
                        print(f"     ‚úÖ Endpoint exists: {endpoint}")
                        
                        # Tester avec POST si GET ne fonctionne pas
                        if response.status_code == 405:
                            post_response = self.session.post(f"{self.base_url}{endpoint}", json={})
                            print(f"     POST Status: {post_response.status_code}")
                            if post_response.status_code in [200, 422, 400]:
                                print(f"     ‚úÖ POST method available")
                                return endpoint
                        else:
                            return endpoint
                    else:
                        print(f"     ‚ùå Endpoint not found")
                        
                except Exception as e:
                    print(f"     ‚ùå Error testing {endpoint}: {str(e)}")
            
            print(f"   ‚ö†Ô∏è No generation endpoint found in common locations")
            return None
            
        except Exception as e:
            print(f"   ‚ùå Error finding generation endpoint: {str(e)}")
            return None
    
    def test_generation_logic(self, connections_state):
        """Tester la logique de g√©n√©ration avec l'√©tat actuel des connexions"""
        try:
            print(f"\nüß™ Step 5: Test de la logique de g√©n√©ration")
            
            # Simuler une g√©n√©ration de test si possible
            generation_endpoint = self.find_post_generation_endpoint()
            
            if generation_endpoint:
                print(f"   Endpoint trouv√©: {generation_endpoint}")
                print(f"   ‚ö†Ô∏è Test de g√©n√©ration non effectu√© pour √©viter de cr√©er de nouveaux posts")
                print(f"   üìä Analyse bas√©e sur l'√©tat des connexions:")
                
                if connections_state:
                    facebook_active = connections_state.get("facebook_active", 0)
                    instagram_active = connections_state.get("instagram_active", 0)
                    
                    print(f"     Facebook actif: {facebook_active}")
                    print(f"     Instagram actif: {instagram_active}")
                    
                    if facebook_active > 0 and instagram_active == 0:
                        print(f"   ‚úÖ ATTENDU: G√©n√©ration devrait cr√©er des posts Facebook uniquement")
                    elif facebook_active == 0 and instagram_active > 0:
                        print(f"   ‚úÖ ATTENDU: G√©n√©ration devrait cr√©er des posts Instagram uniquement")
                    elif facebook_active > 0 and instagram_active > 0:
                        print(f"   ‚úÖ ATTENDU: G√©n√©ration devrait cr√©er des posts pour les deux plateformes")
                    else:
                        print(f"   ‚ö†Ô∏è ATTENDU: Aucune g√©n√©ration possible (pas de connexions actives)")
            else:
                print(f"   ‚ùå Impossible de tester la g√©n√©ration - endpoint non trouv√©")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå Error testing generation logic: {str(e)}")
            return False
    
    def run_post_generation_diagnostic(self):
        """Ex√©cuter le diagnostic complet de g√©n√©ration de posts"""
        print("üéØ MISSION: Diagnostic g√©n√©ration posts incorrecte")
        print("üåê ENVIRONMENT: Preview (social-ai-planner-2.preview.emergentagent.com)")
        print("üîç OBJECTIF: Identifier pourquoi les posts septembre sont √©tiquet√©s Instagram au lieu de Facebook")
        print("=" * 80)
        
        # Step 1: Authentication
        if not self.authenticate():
            print("\n‚ùå CRITICAL: Authentication failed - cannot proceed")
            return False
        
        # Step 2: V√©rifier l'√©tat des connexions sociales
        connections_state = self.check_social_connections_state()
        if connections_state is None:
            print("\n‚ùå CRITICAL: Cannot check social connections state")
            return False
        
        # Step 3: Analyser les posts de septembre
        september_analysis = self.analyze_september_posts()
        if september_analysis is None:
            print("\n‚ùå CRITICAL: Cannot analyze September posts")
            return False
        
        # Step 4: Tester la logique de g√©n√©ration
        generation_test = self.test_generation_logic(connections_state)
        
        print("\n" + "=" * 80)
        print("üéâ DIAGNOSTIC G√âN√âRATION POSTS COMPLETED")
        print("=" * 80)
        
        # Analyse des r√©sultats
        print(f"\nüìä R√âSULTATS DU DIAGNOSTIC:")
        
        print(f"\nüîó √âTAT DES CONNEXIONS:")
        print(f"   Facebook actif: {connections_state.get('facebook_active', 0)}")
        print(f"   Instagram actif: {connections_state.get('instagram_active', 0)}")
        print(f"   Facebook inactif: {connections_state.get('facebook_inactive', 0)}")
        print(f"   Instagram inactif: {connections_state.get('instagram_inactive', 0)}")
        
        print(f"\nüìù POSTS DE SEPTEMBRE:")
        print(f"   Total posts septembre: {september_analysis.get('total_september', 0)}")
        print(f"   Posts Facebook: {september_analysis.get('facebook_september', 0)}")
        print(f"   Posts Instagram: {september_analysis.get('instagram_september', 0)}")
        
        # Diagnostic de l'incoh√©rence
        print(f"\nüîç DIAGNOSTIC DE L'INCOH√âRENCE:")
        
        facebook_active = connections_state.get('facebook_active', 0)
        instagram_active = connections_state.get('instagram_active', 0)
        facebook_posts = september_analysis.get('facebook_september', 0)
        instagram_posts = september_analysis.get('instagram_september', 0)
        
        if facebook_active > 0 and instagram_active == 0:
            if instagram_posts > 0 and facebook_posts == 0:
                print(f"   ‚ùå PROBL√àME IDENTIFI√â: Facebook connect√© mais posts g√©n√©r√©s pour Instagram")
                print(f"   üîç CAUSE POSSIBLE: Logique de g√©n√©ration ne lit pas correctement les connexions actives")
                print(f"   üîç CAUSE POSSIBLE: Posts g√©n√©r√©s avant connexion Facebook / apr√®s d√©connexion Instagram")
            elif facebook_posts > 0 and instagram_posts == 0:
                print(f"   ‚úÖ COH√âRENT: Facebook connect√© et posts Facebook g√©n√©r√©s")
            else:
                print(f"   ‚ö†Ô∏è SITUATION MIXTE: V√©rifier les dates de g√©n√©ration vs connexions")
        elif facebook_active == 0 and instagram_active > 0:
            if facebook_posts > 0 and instagram_posts == 0:
                print(f"   ‚ùå PROBL√àME IDENTIFI√â: Instagram connect√© mais posts g√©n√©r√©s pour Facebook")
            elif instagram_posts > 0 and facebook_posts == 0:
                print(f"   ‚úÖ COH√âRENT: Instagram connect√© et posts Instagram g√©n√©r√©s")
        elif facebook_active == 0 and instagram_active == 0:
            if facebook_posts > 0 or instagram_posts > 0:
                print(f"   ‚ö†Ô∏è POSTS EXISTANTS: Posts g√©n√©r√©s quand connexions √©taient actives")
                print(f"   ‚úÖ NORMAL: Posts persistent apr√®s d√©connexion")
            else:
                print(f"   ‚úÖ COH√âRENT: Pas de connexions, pas de posts")
        else:
            print(f"   ‚úÖ CONNEXIONS MULTIPLES: Facebook et Instagram connect√©s")
        
        print(f"\nüöÄ RECOMMANDATIONS:")
        
        if facebook_active > 0 and instagram_active == 0 and instagram_posts > 0:
            print(f"   1. ‚ùó URGENT: V√©rifier la logique de g√©n√©ration de posts")
            print(f"   2. ‚ùó URGENT: S'assurer que la g√©n√©ration lit social_media_connections avec active=True")
            print(f"   3. ‚ùó URGENT: V√©rifier que Facebook est bien marqu√© comme actif dans la base")
            print(f"   4. üîß SOLUTION: Corriger l'endpoint de g√©n√©ration pour utiliser les bonnes connexions")
        elif facebook_active == 0:
            print(f"   1. üîó Reconnecter Facebook pour activer la g√©n√©ration Facebook")
            print(f"   2. üìù Les posts Instagram existants sont normaux si g√©n√©r√©s quand Instagram √©tait actif")
        else:
            print(f"   1. ‚úÖ √âtat des connexions semble coh√©rent avec les posts")
            print(f"   2. üîç V√©rifier les dates de g√©n√©ration pour confirmer la chronologie")
        
        print("=" * 80)
        
        return True

def main():
    """Main execution function"""
    diagnostic = PostGenerationDiagnostic()
    
    try:
        success = diagnostic.run_post_generation_diagnostic()
        if success:
            print(f"\nüéØ CONCLUSION: Diagnostic g√©n√©ration posts COMPLETED SUCCESSFULLY")
            sys.exit(0)
        else:
            print(f"\nüí• CONCLUSION: Diagnostic g√©n√©ration posts FAILED")
            sys.exit(1)
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è Diagnostic interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error during diagnostic: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()