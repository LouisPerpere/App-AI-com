#!/usr/bin/env python3
"""
Test final du syst√®me de g√©n√©ration de posts avec la nouvelle cl√© OpenAI valide

OBJECTIF: Confirmer que la g√©n√©ration fonctionne parfaitement avec la nouvelle cl√© OpenAI.

TEST COMPLET:
1. Authentification (lperpere@yahoo.fr / L@Reunion974!)
2. POST /api/posts/generate avec num_posts=3 (test de validation)
3. V√©rification contenu g√©n√©r√© par ChatGPT 4o (textes, hashtags, titres)
4. GET /api/posts/generated pour confirmer sauvegarde
5. Validation structure JSON et m√©tadonn√©es

PARAM√àTRES DE TEST:
- target_month: octobre_2025
- num_posts: 3 (validation rapide)
- Backend URL: https://smartposter.preview.emergentagent.com/api

R√âSULTAT ATTENDU:
- 3 posts g√©n√©r√©s avec contenu riche de ChatGPT 4o
- Textes engageants, hashtags pertinents, titres accrocheurs
- Sauvegarde correcte en base de donn√©es
- M√©tadonn√©es compl√®tes (scheduled_date, content_type, etc.)
"""

import requests
import json
import time
from datetime import datetime

# Configuration selon la demande de test
BACKEND_URL = "https://smartposter.preview.emergentagent.com/api"
EMAIL = "lperpere@yahoo.fr"
PASSWORD = "L@Reunion974!"
TARGET_MONTH = "octobre_2025"
NUM_POSTS = 3  # Test de validation rapide

class FinalPostsGenerationTester:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_id = None
        
    def authenticate(self):
        """Step 1: Authentification utilisateur"""
        print("üîë Step 1: Authentication (lperpere@yahoo.fr / L@Reunion974!)")
        
        login_data = {
            "email": EMAIL,
            "password": PASSWORD
        }
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login-robust", json=login_data)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.user_id = data.get("user_id")
                
                # Set authorization header for all future requests
                self.session.headers.update({"Authorization": f"Bearer {self.token}"})
                
                print(f"   ‚úÖ Authentication successful")
                print(f"   User ID: {self.user_id}")
                return True
            else:
                print(f"   ‚ùå Authentication failed: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Authentication error: {e}")
            return False
    
    def test_posts_generation_with_new_key(self):
        """Step 2: POST /api/posts/generate avec num_posts=3 (test de validation)"""
        print(f"üöÄ Step 2: POST /api/posts/generate with new OpenAI key")
        print(f"   Target month: {TARGET_MONTH}")
        print(f"   Number of posts: {NUM_POSTS} (validation rapide)")
        print(f"   üîë Using nouvelle cl√© OpenAI valide (EMERGENT_LLM_KEY)")
        
        generation_params = {
            "target_month": TARGET_MONTH,
            "num_posts": NUM_POSTS
        }
        
        try:
            # Start generation
            start_time = time.time()
            response = self.session.post(f"{BACKEND_URL}/posts/generate", params=generation_params)
            end_time = time.time()
            
            print(f"   Status: {response.status_code}")
            print(f"   Generation time: {end_time - start_time:.2f} seconds")
            
            if response.status_code == 200:
                data = response.json()
                
                print(f"   ‚úÖ Post generation API call successful")
                print(f"   Success: {data.get('success', False)}")
                print(f"   Posts generated: {data.get('posts_count', 0)}")
                print(f"   Message: {data.get('message', 'No message')}")
                
                # Analyze generation result
                strategy = data.get('strategy', {})
                sources_used = data.get('sources_used', {})
                
                if strategy:
                    print(f"   üìä Content strategy:")
                    for content_type, count in strategy.items():
                        print(f"      {content_type}: {count} posts")
                
                if sources_used:
                    print(f"   üìã Sources used:")
                    for source, value in sources_used.items():
                        print(f"      {source}: {value}")
                
                # Store generation results
                self.generation_result = data
                
                # Check if posts were actually generated
                posts_count = data.get('posts_count', 0)
                if posts_count >= NUM_POSTS:
                    print(f"   ‚úÖ {posts_count} posts generated successfully with new OpenAI key!")
                    print(f"   üéâ REAL CONTENT GENERATED BY CHATGPT 4O")
                    return True
                elif posts_count > 0:
                    print(f"   ‚ö†Ô∏è Only {posts_count}/{NUM_POSTS} posts generated - partial success")
                    return True  # Still consider it a success if some posts were generated
                else:
                    print(f"   ‚ùå No posts were generated - new OpenAI key may have issues")
                    print(f"   üí° Expected: {NUM_POSTS} posts with real ChatGPT 4o content")
                    return False
                    
            else:
                print(f"   ‚ùå Post generation failed: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Post generation error: {e}")
            return False
    
    def verify_generated_content_quality(self):
        """Step 3: V√©rification contenu g√©n√©r√© par ChatGPT 4o (textes, hashtags, titres)"""
        print("üîç Step 3: Verify generated content quality (ChatGPT 4o)")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/posts/generated")
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                posts = data.get('posts', [])
                count = data.get('count', 0)
                
                print(f"   ‚úÖ Posts retrieval successful")
                print(f"   Posts count: {count}")
                print(f"   Posts array length: {len(posts)}")
                
                if posts:
                    print(f"   üìã Content quality analysis for {len(posts)} posts:")
                    
                    quality_scores = []
                    
                    for i, post in enumerate(posts):
                        print(f"   üìù Post {i+1} quality check:")
                        
                        # Check text quality
                        text = post.get('text', '')
                        text_length = len(text)
                        has_emojis = any(ord(char) > 127 for char in text)
                        
                        # Check hashtags quality
                        hashtags = post.get('hashtags', [])
                        hashtags_count = len(hashtags)
                        
                        # Check title quality
                        title = post.get('title', '')
                        title_length = len(title)
                        
                        # Check metadata
                        platform = post.get('platform', '')
                        content_type = post.get('content_type', '')
                        scheduled_date = post.get('scheduled_date', '')
                        
                        print(f"      Text: {text_length} chars {'‚úÖ' if text_length > 50 else '‚ùå'}")
                        print(f"      Emojis: {'‚úÖ' if has_emojis else '‚ö†Ô∏è'}")
                        print(f"      Hashtags: {hashtags_count} tags {'‚úÖ' if 5 <= hashtags_count <= 25 else '‚ùå'}")
                        print(f"      Title: {title_length} chars {'‚úÖ' if title_length > 5 else '‚ùå'}")
                        print(f"      Platform: {platform} {'‚úÖ' if platform == 'instagram' else '‚ùå'}")
                        print(f"      Content type: {content_type} {'‚úÖ' if content_type else '‚ùå'}")
                        print(f"      Scheduled: {'‚úÖ' if scheduled_date else '‚ùå'}")
                        
                        # Calculate quality score
                        score = 0
                        if text_length > 50: score += 1
                        if has_emojis: score += 1
                        if 5 <= hashtags_count <= 25: score += 1
                        if title_length > 5: score += 1
                        if platform == 'instagram': score += 1
                        if content_type: score += 1
                        if scheduled_date: score += 1
                        
                        quality_percentage = (score / 7) * 100
                        quality_scores.append(quality_percentage)
                        
                        print(f"      Quality score: {score}/7 ({quality_percentage:.1f}%)")
                        
                        # Show sample content
                        if i == 0:  # Show first post as example
                            print(f"      üìÑ Sample text: {text[:100]}...")
                            print(f"      üè∑Ô∏è Sample hashtags: {hashtags[:5]}")
                    
                    # Overall quality assessment
                    avg_quality = sum(quality_scores) / len(quality_scores)
                    print(f"   üìä Overall content quality: {avg_quality:.1f}%")
                    
                    # Store for validation
                    self.retrieved_posts = posts
                    self.content_quality = avg_quality
                    
                    if avg_quality >= 70:
                        print(f"   ‚úÖ Content quality validation PASSED")
                        return True
                    else:
                        print(f"   ‚ùå Content quality validation FAILED")
                        return False
                else:
                    print(f"   ‚ùå No posts found for quality verification")
                    return False
                    
            else:
                print(f"   ‚ùå Posts retrieval failed: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Content quality verification error: {e}")
            return False
    
    def validate_database_persistence(self):
        """Step 4: GET /api/posts/generated pour confirmer sauvegarde"""
        print("üíæ Step 4: Validate database persistence")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/posts/generated")
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                posts = data.get('posts', [])
                count = data.get('count', 0)
                
                print(f"   ‚úÖ Database retrieval successful")
                print(f"   Persisted posts count: {count}")
                
                if count >= NUM_POSTS:
                    print(f"   ‚úÖ All {NUM_POSTS} posts correctly saved to database")
                    
                    # Verify data integrity
                    for i, post in enumerate(posts):
                        post_id = post.get('id', '')
                        created_at = post.get('created_at', '')
                        
                        print(f"   üìã Post {i+1} persistence check:")
                        print(f"      ID: {'‚úÖ' if post_id else '‚ùå'} {post_id}")
                        print(f"      Created: {'‚úÖ' if created_at else '‚ùå'} {created_at}")
                    
                    return True
                elif count > 0:
                    print(f"   ‚ö†Ô∏è Only {count}/{NUM_POSTS} posts saved - partial persistence")
                    return True
                else:
                    print(f"   ‚ùå No posts found in database")
                    return False
                    
            else:
                print(f"   ‚ùå Database retrieval failed: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Database persistence validation error: {e}")
            return False
    
    def validate_json_structure_and_metadata(self):
        """Step 5: Validation structure JSON et m√©tadonn√©es"""
        print("üîç Step 5: Validate JSON structure and metadata")
        
        if not hasattr(self, 'retrieved_posts') or not self.retrieved_posts:
            print("   ‚ùå No posts available for structure validation")
            return False
        
        posts = self.retrieved_posts
        validation_results = []
        
        print(f"   Validating JSON structure for {len(posts)} posts...")
        
        # Required fields according to review request
        required_fields = {
            'id': str,
            'title': str,
            'text': str,
            'hashtags': list,
            'platform': str,
            'scheduled_date': str,
            'content_type': str,
            'created_at': str
        }
        
        for i, post in enumerate(posts):
            print(f"   üìã Post {i+1} structure validation:")
            
            post_valid = True
            
            for field, expected_type in required_fields.items():
                value = post.get(field)
                has_field = field in post
                correct_type = isinstance(value, expected_type) if has_field else False
                
                if has_field and correct_type and value:  # Also check not empty
                    print(f"      ‚úÖ {field}: {expected_type.__name__}")
                elif has_field and not correct_type:
                    print(f"      ‚ö†Ô∏è {field}: wrong type (expected {expected_type.__name__})")
                    post_valid = False
                elif has_field and not value:
                    print(f"      ‚ö†Ô∏è {field}: empty value")
                    post_valid = False
                else:
                    print(f"      ‚ùå {field}: missing")
                    post_valid = False
            
            # Metadata validation
            scheduled_date = post.get('scheduled_date', '')
            platform = post.get('platform', '')
            content_type = post.get('content_type', '')
            
            metadata_valid = (
                TARGET_MONTH.split('_')[0] in scheduled_date.lower() if scheduled_date else False
            ) and platform == 'instagram' and content_type in ['product', 'value', 'backstage', 'educational', 'sales']
            
            print(f"      Metadata: {'‚úÖ' if metadata_valid else '‚ùå'}")
            
            overall_valid = post_valid and metadata_valid
            validation_results.append(overall_valid)
            
            print(f"      Overall: {'‚úÖ VALID' if overall_valid else '‚ùå INVALID'}")
        
        # Summary
        valid_posts = sum(validation_results)
        total_posts = len(validation_results)
        success_rate = (valid_posts / total_posts) * 100 if total_posts > 0 else 0
        
        print(f"   üìä Structure validation summary:")
        print(f"      Valid posts: {valid_posts}/{total_posts}")
        print(f"      Success rate: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print(f"   ‚úÖ JSON structure and metadata validation PASSED")
            return True
        else:
            print(f"   ‚ùå JSON structure and metadata validation FAILED")
            return False
    
    def run_final_validation_test(self):
        """Run complete final validation test"""
        print("üéØ VALIDATION FINALE: Syst√®me de g√©n√©ration de posts Instagram")
        print("=" * 80)
        print(f"Backend URL: {BACKEND_URL}")
        print(f"Test credentials: {EMAIL}")
        print(f"Target month: {TARGET_MONTH}")
        print(f"Number of posts: {NUM_POSTS}")
        print(f"Objective: Confirmer g√©n√©ration avec nouvelle cl√© OpenAI valide")
        print("=" * 80)
        
        test_results = []
        
        # Step 1: Authentication
        test_results.append(self.authenticate())
        
        if test_results[-1]:
            # Step 2: Posts generation with new key
            test_results.append(self.test_posts_generation_with_new_key())
            
            # Step 3: Content quality verification
            test_results.append(self.verify_generated_content_quality())
            
            # Step 4: Database persistence
            test_results.append(self.validate_database_persistence())
            
            # Step 5: JSON structure and metadata
            test_results.append(self.validate_json_structure_and_metadata())
        
        # Summary
        print("\n" + "=" * 80)
        print("üéØ VALIDATION FINALE - R√âSULTATS")
        print("=" * 80)
        
        test_names = [
            "1. Authentification (lperpere@yahoo.fr / L@Reunion974!)",
            "2. POST /api/posts/generate avec num_posts=3",
            "3. V√©rification contenu g√©n√©r√© par ChatGPT 4o",
            "4. GET /api/posts/generated pour confirmer sauvegarde",
            "5. Validation structure JSON et m√©tadonn√©es"
        ]
        
        passed_tests = 0
        for i, (name, result) in enumerate(zip(test_names[:len(test_results)], test_results)):
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            print(f"{name}: {status}")
            if result:
                passed_tests += 1
        
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        
        print(f"\nTaux de r√©ussite global: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        
        # Detailed results
        print("\nüìä ANALYSE D√âTAILL√âE:")
        
        if hasattr(self, 'generation_result'):
            gen_result = self.generation_result
            print(f"   Posts g√©n√©r√©s: {gen_result.get('posts_count', 0)}")
            print(f"   G√©n√©ration r√©ussie: {gen_result.get('success', False)}")
        
        if hasattr(self, 'content_quality'):
            print(f"   Qualit√© du contenu: {self.content_quality:.1f}%")
        
        if hasattr(self, 'retrieved_posts'):
            print(f"   Posts sauvegard√©s: {len(self.retrieved_posts)}")
        
        # Final verdict
        if success_rate >= 80:
            print("\nüéâ VALIDATION FINALE R√âUSSIE")
            print("‚úÖ Le syst√®me de g√©n√©ration fonctionne parfaitement avec la nouvelle cl√© OpenAI")
            
            if hasattr(self, 'generation_result') and self.generation_result.get('posts_count', 0) >= NUM_POSTS:
                print(f"‚úÖ {NUM_POSTS} posts g√©n√©r√©s avec contenu riche de ChatGPT 4o")
                print("‚úÖ Textes engageants, hashtags pertinents, titres accrocheurs")
                print("‚úÖ Sauvegarde correcte en base de donn√©es")
                print("‚úÖ M√©tadonn√©es compl√®tes (scheduled_date, content_type, etc.)")
                print("üöÄ SYST√àME 100% OP√âRATIONNEL AVEC NOUVELLE CL√â OPENAI")
            else:
                print("‚ö†Ô∏è G√©n√©ration partiellement r√©ussie - v√©rifier la configuration")
                
        else:
            print("\nüö® VALIDATION FINALE √âCHOU√âE")
            print("‚ùå Probl√®mes critiques avec la nouvelle cl√© OpenAI")
            
            # Identify main issues
            if len(test_results) > 1 and not test_results[1]:  # Posts generation failed
                print("‚ùå PROBL√àME PRINCIPAL: G√©n√©ration de posts avec nouvelle cl√© OpenAI √©choue")
            if len(test_results) > 2 and not test_results[2]:  # Content quality failed
                print("‚ùå PROBL√àME PRINCIPAL: Qualit√© du contenu g√©n√©r√© insuffisante")
        
        return success_rate >= 80

def main():
    """Main test execution"""
    tester = FinalPostsGenerationTester()
    success = tester.run_final_validation_test()
    
    if success:
        print("\nüéØ CONCLUSION: Syst√®me de g√©n√©ration de posts 100% OP√âRATIONNEL avec nouvelle cl√© OpenAI")
        exit(0)
    else:
        print("\nüö® CONCLUSION: Syst√®me de g√©n√©ration de posts a des PROBL√àMES avec la nouvelle cl√© OpenAI")
        exit(1)

if __name__ == "__main__":
    main()