#!/usr/bin/env python3
"""
DIAGNOSTIC INSTAGRAM CONNEXION LIVE - claire-marcus.com
=====================================================

Diagnostic complet du probl√®me de connexion Instagram sur l'environnement LIVE claire-marcus.com.

CONTEXTE CRITIQUE:
- Le site LIVE est h√©berg√© sur Emergent (pas ailleurs)
- Les variables d'environnement sont correctes sur LIVE
- Les URLs de callback sont correctes dans Facebook Developer Console
- Le probl√®me existait AVANT les modifications de pr√©visualisation
- Il y a eu une R√âGRESSION sur LIVE - √ßa marchait avant

OBJECTIFS DU DIAGNOSTIC:
1. Tester l'environnement LIVE: https://claire-marcus.com/api
2. Analyser le callback Instagram sur LIVE
3. V√©rifier si c'est un probl√®me de code, de base de donn√©es, ou de configuration
4. Comparer avec ce qui fonctionnait avant
5. Identifier la cause de la r√©gression

ACTIONS SP√âCIFIQUES:
1. Authentification sur LIVE avec lperpere@yahoo.fr / L@Reunion974!
2. G√©n√©rer une URL d'auth Instagram sur LIVE
3. Tester le callback Instagram sur LIVE (simulation)
4. V√©rifier l'√©tat des connexions sur LIVE
5. Analyser les logs d'erreur sp√©cifiques au LIVE
6. Identifier ce qui a chang√© pour causer la r√©gression
"""

import requests
import json
import sys
import time
from urllib.parse import urlparse, parse_qs
from datetime import datetime

# Configuration LIVE
LIVE_BASE_URL = "https://claire-marcus.com/api"
TEST_EMAIL = "lperpere@yahoo.fr"
TEST_PASSWORD = "L@Reunion974!"

class LiveInstagramDiagnostic:
    def __init__(self):
        self.session = requests.Session()
        self.access_token = None
        self.user_id = None
        self.diagnostic_results = {}
        
    def log_result(self, test_name, success, details=""):
        """Log diagnostic result"""
        self.diagnostic_results[test_name] = {
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        
    def authenticate_live(self):
        """Authentification sur l'environnement LIVE"""
        print("üîê √âTAPE 1: Authentification sur LIVE claire-marcus.com...")
        
        login_data = {
            "email": TEST_EMAIL,
            "password": TEST_PASSWORD
        }
        
        try:
            response = self.session.post(f"{LIVE_BASE_URL}/auth/login-robust", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.access_token = data.get("access_token")
                self.user_id = data.get("user_id")
                
                # Set authorization header for future requests
                self.session.headers.update({
                    "Authorization": f"Bearer {self.access_token}"
                })
                
                print(f"‚úÖ Authentification LIVE r√©ussie")
                print(f"   User ID: {self.user_id}")
                print(f"   Token: {self.access_token[:20]}..." if self.access_token else "   Token: None")
                
                self.log_result("authentication_live", True, f"User ID: {self.user_id}")
                return True
            else:
                error_msg = f"Status: {response.status_code}, Response: {response.text}"
                print(f"‚ùå Authentification LIVE √©chou√©e: {response.status_code}")
                print(f"   Response: {response.text}")
                
                self.log_result("authentication_live", False, error_msg)
                return False
                
        except Exception as e:
            error_msg = f"Exception: {str(e)}"
            print(f"‚ùå Erreur authentification LIVE: {e}")
            self.log_result("authentication_live", False, error_msg)
            return False
    
    def test_live_health_check(self):
        """V√©rifier l'√©tat de sant√© de l'API LIVE"""
        print("\nüè• √âTAPE 2: V√©rification sant√© API LIVE...")
        
        try:
            response = self.session.get(f"{LIVE_BASE_URL}/health")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ API LIVE op√©rationnelle")
                print(f"   Status: {data.get('status', 'unknown')}")
                print(f"   Service: {data.get('service', 'unknown')}")
                print(f"   Timestamp: {data.get('timestamp', 'unknown')}")
                
                self.log_result("live_health_check", True, f"Status: {data.get('status')}")
                return True
            else:
                error_msg = f"Status: {response.status_code}"
                print(f"‚ùå API LIVE non op√©rationnelle: {response.status_code}")
                
                self.log_result("live_health_check", False, error_msg)
                return False
                
        except Exception as e:
            error_msg = f"Exception: {str(e)}"
            print(f"‚ùå Erreur v√©rification sant√© LIVE: {e}")
            self.log_result("live_health_check", False, error_msg)
            return False
    
    def test_live_instagram_auth_url(self):
        """Tester la g√©n√©ration d'URL d'auth Instagram sur LIVE"""
        print("\nüì± √âTAPE 3: Test g√©n√©ration URL auth Instagram LIVE...")
        
        try:
            response = self.session.get(f"{LIVE_BASE_URL}/social/instagram/auth-url")
            
            if response.status_code == 200:
                data = response.json()
                auth_url = data.get("auth_url", "")
                
                print(f"‚úÖ URL auth Instagram g√©n√©r√©e sur LIVE")
                print(f"   URL: {auth_url[:100]}...")
                
                # Parse URL to check redirect_uri
                parsed_url = urlparse(auth_url)
                query_params = parse_qs(parsed_url.query)
                redirect_uri = query_params.get("redirect_uri", [""])[0]
                client_id = query_params.get("client_id", [""])[0]
                config_id = query_params.get("config_id", [""])[0]
                state = query_params.get("state", [""])[0]
                
                print(f"   Redirect URI: {redirect_uri}")
                print(f"   Client ID: {client_id}")
                print(f"   Config ID: {config_id}")
                print(f"   State: {state[:20]}..." if state else "   State: None")
                
                # V√©rifier que l'URL utilise le domaine LIVE
                if "claire-marcus.com" in redirect_uri:
                    print("‚úÖ Redirect URI utilise le domaine LIVE correct")
                    live_domain_correct = True
                else:
                    print("‚ùå Redirect URI n'utilise pas le domaine LIVE")
                    print(f"   Attendu: claire-marcus.com")
                    print(f"   Trouv√©: {redirect_uri}")
                    live_domain_correct = False
                
                # V√©rifier les param√®tres critiques
                has_required_params = bool(client_id and config_id and state and redirect_uri)
                
                details = {
                    "redirect_uri": redirect_uri,
                    "client_id": client_id,
                    "config_id": config_id,
                    "state_present": bool(state),
                    "live_domain_correct": live_domain_correct,
                    "has_required_params": has_required_params
                }
                
                success = live_domain_correct and has_required_params
                self.log_result("live_instagram_auth_url", success, json.dumps(details))
                return success
                    
            else:
                error_msg = f"Status: {response.status_code}, Response: {response.text}"
                print(f"‚ùå G√©n√©ration URL auth Instagram LIVE √©chou√©e: {response.status_code}")
                print(f"   Response: {response.text}")
                
                self.log_result("live_instagram_auth_url", False, error_msg)
                return False
                
        except Exception as e:
            error_msg = f"Exception: {str(e)}"
            print(f"‚ùå Erreur test URL auth Instagram LIVE: {e}")
            self.log_result("live_instagram_auth_url", False, error_msg)
            return False
    
    def test_live_instagram_callback_simulation(self):
        """Tester le callback Instagram sur LIVE avec simulation"""
        print("\nüîÑ √âTAPE 4: Test callback Instagram LIVE (simulation)...")
        
        try:
            # D'abord obtenir un param√®tre state valide depuis l'URL d'auth
            auth_response = self.session.get(f"{LIVE_BASE_URL}/social/instagram/auth-url")
            if auth_response.status_code != 200:
                print("‚ùå Impossible d'obtenir l'URL d'auth pour le param√®tre state")
                self.log_result("live_instagram_callback", False, "Cannot get auth URL for state")
                return False
                
            auth_data = auth_response.json()
            auth_url = auth_data.get("auth_url", "")
            parsed_url = urlparse(auth_url)
            query_params = parse_qs(parsed_url.query)
            state = query_params.get("state", [""])[0]
            
            if not state:
                print("‚ùå Aucun param√®tre state trouv√© dans l'URL d'auth")
                self.log_result("live_instagram_callback", False, "No state parameter in auth URL")
                return False
                
            print(f"   Utilisation param√®tre state: {state[:20]}...")
            
            # Simuler callback avec param√®tres de test
            callback_params = {
                "code": "live_test_authorization_code_instagram_12345",
                "state": state
            }
            
            # Tester l'endpoint callback
            callback_url = f"{LIVE_BASE_URL}/social/instagram/callback"
            response = self.session.get(callback_url, params=callback_params, allow_redirects=False)
            
            print(f"   Status callback: {response.status_code}")
            
            # Analyser la r√©ponse du callback
            if response.status_code in [302, 200]:
                print("‚úÖ Endpoint callback Instagram LIVE accessible")
                
                callback_success = True
                error_type = "none"
                redirect_url = ""
                
                if response.status_code == 302:
                    redirect_url = response.headers.get("Location", "")
                    print(f"   URL de redirection: {redirect_url}")
                    
                    # V√©rifier si la redirection utilise le domaine LIVE
                    if "claire-marcus.com" in redirect_url:
                        print("‚úÖ Redirection callback utilise le domaine LIVE correct")
                    else:
                        print("‚ùå Redirection callback n'utilise pas le domaine LIVE")
                        callback_success = False
                    
                    # Analyser le type d'erreur dans la redirection
                    if "invalid_state" in redirect_url.lower():
                        error_type = "invalid_state"
                        print("‚ö†Ô∏è Erreur de validation state (attendue avec donn√©es de test)")
                    elif "token_exchange" in redirect_url.lower():
                        error_type = "token_exchange"
                        print("‚ö†Ô∏è Erreur d'√©change de token (attendue avec code de test)")
                    elif "success" in redirect_url.lower():
                        error_type = "success"
                        print("‚úÖ Callback r√©ussi (inattendu avec donn√©es de test)")
                    else:
                        error_type = "unknown"
                        print("‚ö†Ô∏è Type d'erreur inconnu dans la redirection")
                
                details = {
                    "status_code": response.status_code,
                    "redirect_url": redirect_url,
                    "error_type": error_type,
                    "callback_accessible": True,
                    "live_domain_redirect": "claire-marcus.com" in redirect_url if redirect_url else False
                }
                
                self.log_result("live_instagram_callback", callback_success, json.dumps(details))
                return callback_success
                    
            else:
                error_msg = f"Status: {response.status_code}, Response: {response.text}"
                print(f"‚ùå Callback Instagram LIVE √©chou√©: {response.status_code}")
                print(f"   Response: {response.text}")
                
                self.log_result("live_instagram_callback", False, error_msg)
                return False
                
        except Exception as e:
            error_msg = f"Exception: {str(e)}"
            print(f"‚ùå Erreur test callback Instagram LIVE: {e}")
            self.log_result("live_instagram_callback", False, error_msg)
            return False
    
    def test_live_social_connections_state(self):
        """V√©rifier l'√©tat des connexions sociales sur LIVE"""
        print("\nüîó √âTAPE 5: V√©rification √©tat connexions sociales LIVE...")
        
        try:
            # Test endpoint principal des connexions
            response = self.session.get(f"{LIVE_BASE_URL}/social/connections")
            
            if response.status_code == 200:
                data = response.json()
                connections = data.get("connections", [])
                
                print(f"‚úÖ Endpoint connexions sociales LIVE accessible")
                print(f"   Connexions actives: {len(connections)}")
                
                facebook_connections = 0
                instagram_connections = 0
                
                for conn in connections:
                    platform = conn.get("platform", "unknown")
                    active = conn.get("active", False)
                    print(f"   - {platform}: {'active' if active else 'inactive'}")
                    
                    if platform.lower() == "facebook":
                        facebook_connections += 1
                    elif platform.lower() == "instagram":
                        instagram_connections += 1
                
                details = {
                    "total_connections": len(connections),
                    "facebook_connections": facebook_connections,
                    "instagram_connections": instagram_connections,
                    "connections": connections
                }
                
                self.log_result("live_social_connections", True, json.dumps(details, default=str))
                return True
            else:
                error_msg = f"Status: {response.status_code}, Response: {response.text}"
                print(f"‚ùå Endpoint connexions sociales LIVE √©chou√©: {response.status_code}")
                print(f"   Response: {response.text}")
                
                self.log_result("live_social_connections", False, error_msg)
                return False
                
        except Exception as e:
            error_msg = f"Exception: {str(e)}"
            print(f"‚ùå Erreur test connexions sociales LIVE: {e}")
            self.log_result("live_social_connections", False, error_msg)
            return False
    
    def test_live_debug_social_connections(self):
        """Tester l'endpoint de debug des connexions sociales sur LIVE"""
        print("\nüîç √âTAPE 6: Test debug connexions sociales LIVE...")
        
        try:
            response = self.session.get(f"{LIVE_BASE_URL}/debug/social-connections")
            
            if response.status_code == 200:
                data = response.json()
                
                print(f"‚úÖ Endpoint debug connexions sociales LIVE accessible")
                print(f"   Total connexions: {data.get('total_connections', 0)}")
                print(f"   Connexions actives: {data.get('active_connections', 0)}")
                print(f"   Connexions Facebook: {data.get('facebook_connections', 0)}")
                print(f"   Connexions Instagram: {data.get('instagram_connections', 0)}")
                
                # Analyser les d√©tails des connexions
                collections_data = data.get('collections_analysis', {})
                if collections_data:
                    print(f"   Analyse collections:")
                    for collection_name, collection_data in collections_data.items():
                        print(f"     - {collection_name}: {collection_data.get('count', 0)} connexions")
                
                self.log_result("live_debug_connections", True, json.dumps(data, default=str))
                return True
            else:
                error_msg = f"Status: {response.status_code}, Response: {response.text}"
                print(f"‚ùå Endpoint debug connexions LIVE √©chou√©: {response.status_code}")
                print(f"   Response: {response.text}")
                
                self.log_result("live_debug_connections", False, error_msg)
                return False
                
        except Exception as e:
            error_msg = f"Exception: {str(e)}"
            print(f"‚ùå Erreur test debug connexions LIVE: {e}")
            self.log_result("live_debug_connections", False, error_msg)
            return False
    
    def test_live_instagram_publication(self):
        """Tester la publication Instagram sur LIVE pour identifier les erreurs"""
        print("\nüì§ √âTAPE 7: Test publication Instagram LIVE...")
        
        try:
            # D'abord v√©rifier s'il y a des posts disponibles
            posts_response = self.session.get(f"{LIVE_BASE_URL}/posts/generated")
            
            if posts_response.status_code != 200:
                print("‚ö†Ô∏è Impossible de r√©cup√©rer les posts g√©n√©r√©s")
                self.log_result("live_instagram_publication", False, "Cannot get generated posts")
                return False
            
            posts_data = posts_response.json()
            posts = posts_data.get("posts", [])
            
            # Chercher un post Instagram pour tester
            instagram_post = None
            for post in posts:
                if post.get("platform", "").lower() == "instagram":
                    instagram_post = post
                    break
            
            if not instagram_post:
                print("‚ö†Ô∏è Aucun post Instagram trouv√© pour tester la publication")
                self.log_result("live_instagram_publication", False, "No Instagram posts found")
                return False
            
            post_id = instagram_post.get("id")
            print(f"   Test publication avec post ID: {post_id}")
            
            # Tenter la publication
            publish_data = {"post_id": post_id}
            response = self.session.post(f"{LIVE_BASE_URL}/posts/publish", json=publish_data)
            
            print(f"   Status publication: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Publication Instagram r√©ussie (inattendu)")
                print(f"   Response: {data}")
                
                self.log_result("live_instagram_publication", True, json.dumps(data, default=str))
                return True
            else:
                # Analyser l'erreur de publication
                try:
                    error_data = response.json()
                    error_message = error_data.get("error", response.text)
                except:
                    error_message = response.text
                
                print(f"‚ùå Publication Instagram √©chou√©e (attendu)")
                print(f"   Erreur: {error_message}")
                
                # Analyser le type d'erreur pour diagnostic
                error_type = "unknown"
                if "connexion sociale" in error_message.lower():
                    error_type = "no_social_connections"
                elif "access token" in error_message.lower():
                    error_type = "invalid_access_token"
                elif "oauth" in error_message.lower():
                    error_type = "oauth_error"
                elif "api" in error_message.lower():
                    error_type = "api_error"
                
                details = {
                    "status_code": response.status_code,
                    "error_message": error_message,
                    "error_type": error_type,
                    "post_id": post_id
                }
                
                # Pour le diagnostic, une erreur de publication est informative
                self.log_result("live_instagram_publication", True, json.dumps(details))
                return True
                
        except Exception as e:
            error_msg = f"Exception: {str(e)}"
            print(f"‚ùå Erreur test publication Instagram LIVE: {e}")
            self.log_result("live_instagram_publication", False, error_msg)
            return False
    
    def analyze_regression_causes(self):
        """Analyser les causes possibles de la r√©gression"""
        print("\nüî¨ √âTAPE 8: Analyse causes de r√©gression...")
        
        potential_causes = []
        
        # Analyser les r√©sultats des tests pr√©c√©dents
        auth_result = self.diagnostic_results.get("live_instagram_auth_url", {})
        callback_result = self.diagnostic_results.get("live_instagram_callback", {})
        connections_result = self.diagnostic_results.get("live_social_connections", {})
        debug_result = self.diagnostic_results.get("live_debug_connections", {})
        
        print("   Analyse des r√©sultats de diagnostic:")
        
        # 1. Probl√®me d'URL de callback
        if auth_result.get("success") and auth_result.get("details"):
            try:
                auth_details = json.loads(auth_result["details"])
                if not auth_details.get("live_domain_correct"):
                    potential_causes.append("URL de callback incorrecte - n'utilise pas claire-marcus.com")
                    print("   ‚ùå URL de callback incorrecte d√©tect√©e")
                else:
                    print("   ‚úÖ URL de callback correcte")
            except:
                pass
        
        # 2. Probl√®me de callback
        if callback_result.get("success") and callback_result.get("details"):
            try:
                callback_details = json.loads(callback_result["details"])
                error_type = callback_details.get("error_type", "unknown")
                if error_type == "invalid_state":
                    potential_causes.append("Probl√®me de validation du param√®tre state")
                    print("   ‚ö†Ô∏è Probl√®me de validation state d√©tect√©")
                elif error_type == "token_exchange":
                    potential_causes.append("Probl√®me d'√©change de token avec Facebook API")
                    print("   ‚ùå Probl√®me d'√©change de token d√©tect√©")
            except:
                pass
        
        # 3. Probl√®me de base de donn√©es
        if connections_result.get("success") and connections_result.get("details"):
            try:
                conn_details = json.loads(connections_result["details"])
                instagram_count = conn_details.get("instagram_connections", 0)
                if instagram_count == 0:
                    potential_causes.append("Aucune connexion Instagram active en base de donn√©es")
                    print("   ‚ùå Aucune connexion Instagram active trouv√©e")
                else:
                    print(f"   ‚úÖ {instagram_count} connexion(s) Instagram trouv√©e(s)")
            except:
                pass
        
        # 4. Probl√®me de configuration
        if not auth_result.get("success"):
            potential_causes.append("Probl√®me de configuration OAuth Instagram")
            print("   ‚ùå Probl√®me de configuration OAuth d√©tect√©")
        
        print(f"\n   Causes potentielles identifi√©es: {len(potential_causes)}")
        for i, cause in enumerate(potential_causes, 1):
            print(f"   {i}. {cause}")
        
        # Recommandations bas√©es sur l'analyse
        recommendations = []
        
        if "URL de callback incorrecte" in str(potential_causes):
            recommendations.append("V√©rifier les variables d'environnement INSTAGRAM_REDIRECT_URI sur LIVE")
        
        if "token_exchange" in str(potential_causes):
            recommendations.append("V√©rifier la configuration Facebook Developer Console")
            recommendations.append("V√©rifier les cl√©s FACEBOOK_APP_ID et FACEBOOK_APP_SECRET sur LIVE")
        
        if "Aucune connexion Instagram active" in str(potential_causes):
            recommendations.append("L'utilisateur doit reconnecter son compte Instagram")
        
        if "configuration OAuth" in str(potential_causes):
            recommendations.append("V√©rifier toutes les variables d'environnement OAuth sur LIVE")
        
        print(f"\n   Recommandations: {len(recommendations)}")
        for i, rec in enumerate(recommendations, 1):
            print(f"   {i}. {rec}")
        
        analysis_result = {
            "potential_causes": potential_causes,
            "recommendations": recommendations,
            "analysis_timestamp": datetime.now().isoformat()
        }
        
        self.log_result("regression_analysis", True, json.dumps(analysis_result))
        return True
    
    def run_complete_diagnostic(self):
        """Ex√©cuter le diagnostic complet Instagram LIVE"""
        print("üéØ DIAGNOSTIC COMPLET INSTAGRAM CONNEXION LIVE")
        print("=" * 70)
        print(f"Environnement cible: {LIVE_BASE_URL}")
        print(f"Utilisateur test: {TEST_EMAIL}")
        print("=" * 70)
        
        test_results = []
        
        # √âtape 1: Authentification LIVE
        if not self.authenticate_live():
            print("\n‚ùå Authentification LIVE √©chou√©e - impossible de continuer le diagnostic")
            return False
        
        # √âtape 2: V√©rification sant√© API
        test_results.append(("Sant√© API LIVE", self.test_live_health_check()))
        
        # √âtape 3: Test URL auth Instagram
        test_results.append(("URL Auth Instagram LIVE", self.test_live_instagram_auth_url()))
        
        # √âtape 4: Test callback Instagram
        test_results.append(("Callback Instagram LIVE", self.test_live_instagram_callback_simulation()))
        
        # √âtape 5: √âtat connexions sociales
        test_results.append(("Connexions Sociales LIVE", self.test_live_social_connections_state()))
        
        # √âtape 6: Debug connexions
        test_results.append(("Debug Connexions LIVE", self.test_live_debug_social_connections()))
        
        # √âtape 7: Test publication
        test_results.append(("Publication Instagram LIVE", self.test_live_instagram_publication()))
        
        # √âtape 8: Analyse r√©gression
        test_results.append(("Analyse R√©gression", self.analyze_regression_causes()))
        
        # R√©sum√© du diagnostic
        print("\n" + "=" * 70)
        print("üìä R√âSULTATS DIAGNOSTIC INSTAGRAM LIVE")
        print("=" * 70)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
            print(f"{status} {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà Taux de r√©ussite: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        
        # Diagnostic final
        print("\n" + "=" * 70)
        print("üî¨ DIAGNOSTIC FINAL")
        print("=" * 70)
        
        if success_rate >= 75:
            print("‚úÖ La plupart des composants fonctionnent correctement sur LIVE")
            print("   Le probl√®me semble √™tre sp√©cifique √† la connexion Instagram")
        else:
            print("‚ùå Plusieurs composants ont des probl√®mes sur LIVE")
            print("   Investigation approfondie requise")
        
        # Afficher les d√©tails du diagnostic
        print("\nüìã D√âTAILS DIAGNOSTIC:")
        for test_name, result_data in self.diagnostic_results.items():
            if result_data.get("details"):
                print(f"\n{test_name.upper()}:")
                try:
                    if result_data["details"].startswith("{"):
                        details = json.loads(result_data["details"])
                        for key, value in details.items():
                            print(f"  - {key}: {value}")
                    else:
                        print(f"  - {result_data['details']}")
                except:
                    print(f"  - {result_data['details']}")
        
        return success_rate >= 50

def main():
    """Ex√©cution principale du diagnostic"""
    diagnostic = LiveInstagramDiagnostic()
    success = diagnostic.run_complete_diagnostic()
    
    if success:
        print("\n‚úÖ Diagnostic LIVE Instagram termin√© avec succ√®s")
        print("   Consultez les r√©sultats ci-dessus pour identifier la cause de la r√©gression")
        sys.exit(0)
    else:
        print("\n‚ùå Diagnostic LIVE Instagram r√©v√®le des probl√®mes critiques")
        print("   Investigation technique approfondie requise")
        sys.exit(1)

if __name__ == "__main__":
    main()