#!/usr/bin/env python3
"""
Facebook OAuth Real Flow Test - Test with actual Facebook OAuth flow
Testing the complete Facebook OAuth flow to identify why even real reconnections fail

Identifiants: lperpere@yahoo.fr / L@Reunion974!

OBJECTIF: Tester le flow OAuth complet avec Facebook pour identifier pourquoi m√™me les vraies reconnexions √©chouent
"""

import requests
import json
import sys
import re
import time
from urllib.parse import urlparse, parse_qs
from datetime import datetime

# Configuration
BASE_URL = "https://claire-marcus-app-1.preview.emergentagent.com/api"
TEST_CREDENTIALS = {
    "email": "lperpere@yahoo.fr",
    "password": "L@Reunion974!"
}

class FacebookOAuthRealTest:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.user_id = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", error=""):
        """Log test results"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        if details:
            print(f"   Details: {details}")
        if error:
            print(f"   Error: {error}")
        print()
        
    def authenticate(self):
        """Step 1: Authenticate and get JWT token"""
        try:
            print("üîê Step 1: Authentication")
            response = self.session.post(
                f"{BASE_URL}/auth/login-robust",
                json=TEST_CREDENTIALS,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.user_id = data.get("user_id")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                self.log_test("Authentication", True, f"User ID: {self.user_id}")
                return True
            else:
                self.log_test("Authentication", False, 
                            f"Status: {response.status_code}", 
                            response.text[:200])
                return False
                
        except Exception as e:
            self.log_test("Authentication", False, error=str(e))
            return False
    
    def test_facebook_credentials_validity(self):
        """Test 1: Test Facebook credentials validity with Facebook API directly"""
        try:
            print("üîç Test 1: Test Facebook credentials validity")
            
            # Get Facebook credentials from our auth URL
            response = self.session.get(f"{BASE_URL}/social/facebook/auth-url", timeout=30)
            
            if response.status_code != 200:
                self.log_test("Facebook Credentials Validity", False, 
                            f"Cannot get auth URL: {response.status_code}")
                return False
            
            data = response.json()
            auth_url = data.get("auth_url", "")
            
            # Parse credentials
            parsed_url = urlparse(auth_url)
            query_params = parse_qs(parsed_url.query)
            
            app_id = query_params.get('client_id', [None])[0]
            config_id = query_params.get('config_id', [None])[0]
            redirect_uri = query_params.get('redirect_uri', [None])[0]
            
            # Test if Facebook recognizes our App ID by making a request to Facebook API
            # This tests if our credentials are valid with Facebook
            facebook_test_url = f"https://graph.facebook.com/{app_id}"
            
            try:
                fb_response = requests.get(facebook_test_url, timeout=10)
                if fb_response.status_code == 200:
                    fb_data = fb_response.json()
                    app_name = fb_data.get("name", "Unknown")
                    self.log_test("Facebook Credentials Validity", True, 
                                f"‚úÖ App ID {app_id} reconnu par Facebook - App: {app_name}")
                    return True
                else:
                    self.log_test("Facebook Credentials Validity", False, 
                                f"‚ùå App ID {app_id} non reconnu par Facebook: {fb_response.status_code}")
                    return False
            except Exception as fb_error:
                self.log_test("Facebook Credentials Validity", False, 
                            f"‚ùå Erreur test Facebook API: {str(fb_error)}")
                return False
                
        except Exception as e:
            self.log_test("Facebook Credentials Validity", False, error=str(e))
            return False
    
    def test_facebook_app_permissions(self):
        """Test 2: Test Facebook App permissions and configuration"""
        try:
            print("üîê Test 2: Test Facebook App permissions")
            
            # Get auth URL and analyze permissions
            response = self.session.get(f"{BASE_URL}/social/facebook/auth-url", timeout=30)
            
            if response.status_code != 200:
                self.log_test("Facebook App Permissions", False, 
                            f"Cannot get auth URL: {response.status_code}")
                return False
            
            data = response.json()
            auth_url = data.get("auth_url", "")
            
            # Parse permissions from scope parameter
            parsed_url = urlparse(auth_url)
            query_params = parse_qs(parsed_url.query)
            
            scope = query_params.get('scope', [None])[0]
            response_type = query_params.get('response_type', [None])[0]
            
            # Check required permissions for Facebook Business
            required_permissions = [
                "pages_show_list",
                "pages_read_engagement", 
                "pages_manage_posts"
            ]
            
            if scope:
                permissions = scope.split(',')
                missing_permissions = [perm for perm in required_permissions if perm not in permissions]
                
                if not missing_permissions and response_type == "code":
                    self.log_test("Facebook App Permissions", True, 
                                f"‚úÖ Permissions correctes: {scope}, Response type: {response_type}")
                    return True
                else:
                    self.log_test("Facebook App Permissions", False, 
                                f"‚ùå Permissions manquantes: {missing_permissions}, Response type: {response_type}")
                    return False
            else:
                self.log_test("Facebook App Permissions", False, 
                            "‚ùå Aucune permission dans scope")
                return False
                
        except Exception as e:
            self.log_test("Facebook App Permissions", False, error=str(e))
            return False
    
    def test_redirect_uri_configuration(self):
        """Test 3: Test redirect URI configuration"""
        try:
            print("üîó Test 3: Test redirect URI configuration")
            
            # Get auth URL and check redirect URI
            response = self.session.get(f"{BASE_URL}/social/facebook/auth-url", timeout=30)
            
            if response.status_code != 200:
                self.log_test("Redirect URI Configuration", False, 
                            f"Cannot get auth URL: {response.status_code}")
                return False
            
            data = response.json()
            auth_url = data.get("auth_url", "")
            
            # Parse redirect URI
            parsed_url = urlparse(auth_url)
            query_params = parse_qs(parsed_url.query)
            
            redirect_uri = query_params.get('redirect_uri', [None])[0]
            expected_redirect = "https://claire-marcus.com/api/social/facebook/callback"
            
            if redirect_uri == expected_redirect:
                # Test if redirect URI is accessible
                try:
                    # Test with invalid parameters to see if endpoint exists
                    test_response = requests.get(
                        redirect_uri,
                        params={"error": "access_denied"},
                        timeout=10,
                        allow_redirects=False
                    )
                    
                    if test_response.status_code in [302, 301]:
                        self.log_test("Redirect URI Configuration", True, 
                                    f"‚úÖ Redirect URI correct et accessible: {redirect_uri}")
                        return True
                    else:
                        self.log_test("Redirect URI Configuration", False, 
                                    f"‚ùå Redirect URI non accessible: {test_response.status_code}")
                        return False
                        
                except Exception as redirect_error:
                    self.log_test("Redirect URI Configuration", False, 
                                f"‚ùå Erreur test redirect URI: {str(redirect_error)}")
                    return False
            else:
                self.log_test("Redirect URI Configuration", False, 
                            f"‚ùå Redirect URI incorrect: {redirect_uri} (expected: {expected_redirect})")
                return False
                
        except Exception as e:
            self.log_test("Redirect URI Configuration", False, error=str(e))
            return False
    
    def test_facebook_oauth_url_generation(self):
        """Test 4: Test Facebook OAuth URL generation multiple times"""
        try:
            print("üîÑ Test 4: Test Facebook OAuth URL generation")
            
            # Generate multiple OAuth URLs to test consistency
            urls = []
            states = []
            
            for i in range(5):
                response = self.session.get(f"{BASE_URL}/social/facebook/auth-url", timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    auth_url = data.get("auth_url", "")
                    urls.append(auth_url)
                    
                    # Extract state
                    parsed_url = urlparse(auth_url)
                    query_params = parse_qs(parsed_url.query)
                    state = query_params.get('state', [None])[0]
                    if state:
                        states.append(state)
                
                time.sleep(0.5)  # Small delay
            
            if len(urls) == 5 and len(states) == 5:
                # Check state uniqueness and format
                unique_states = len(set(states))
                valid_format_count = 0
                
                for state in states:
                    if '|' in state:
                        random_part, user_id_part = state.split('|', 1)
                        if user_id_part == self.user_id and len(random_part) > 10:
                            valid_format_count += 1
                
                if unique_states == 5 and valid_format_count == 5:
                    self.log_test("Facebook OAuth URL Generation", True, 
                                f"‚úÖ 5 URLs g√©n√©r√©es avec states uniques et format correct")
                    return True
                else:
                    self.log_test("Facebook OAuth URL Generation", False, 
                                f"‚ùå States: {unique_states}/5 uniques, {valid_format_count}/5 format correct")
                    return False
            else:
                self.log_test("Facebook OAuth URL Generation", False, 
                            f"‚ùå G√©n√©ration URLs √©chou√©e: {len(urls)}/5 URLs, {len(states)}/5 states")
                return False
                
        except Exception as e:
            self.log_test("Facebook OAuth URL Generation", False, error=str(e))
            return False
    
    def test_callback_error_handling(self):
        """Test 5: Test callback error handling with various scenarios"""
        try:
            print("üö® Test 5: Test callback error handling")
            
            # Get a valid state for testing
            response = self.session.get(f"{BASE_URL}/social/facebook/auth-url", timeout=30)
            
            if response.status_code != 200:
                self.log_test("Callback Error Handling", False, 
                            "Cannot get auth URL for state")
                return False
            
            data = response.json()
            auth_url = data.get("auth_url", "")
            
            parsed_url = urlparse(auth_url)
            query_params = parse_qs(parsed_url.query)
            valid_state = query_params.get('state', [None])[0]
            
            if not valid_state:
                self.log_test("Callback Error Handling", False, 
                            "Cannot extract valid state")
                return False
            
            # Test various error scenarios
            test_scenarios = [
                {
                    "name": "Facebook user denial",
                    "params": {"error": "access_denied", "state": valid_state},
                    "expected_redirect": "auth_error=facebook_access_denied"
                },
                {
                    "name": "Invalid state",
                    "params": {"code": "valid_code", "state": "invalid_state"},
                    "expected_redirect": "auth_error=facebook_invalid_state"
                },
                {
                    "name": "Missing code and error",
                    "params": {"state": valid_state},
                    "expected_redirect": "auth_error=facebook_oauth_failed"
                }
            ]
            
            passed_scenarios = 0
            
            for scenario in test_scenarios:
                try:
                    callback_response = self.session.get(
                        f"{BASE_URL}/social/facebook/callback",
                        params=scenario["params"],
                        timeout=30,
                        allow_redirects=False
                    )
                    
                    if callback_response.status_code in [302, 301]:
                        location = callback_response.headers.get('Location', '')
                        if scenario["expected_redirect"] in location:
                            passed_scenarios += 1
                            print(f"   ‚úÖ {scenario['name']}: Correct error handling")
                        else:
                            print(f"   ‚ùå {scenario['name']}: Unexpected redirect: {location}")
                    else:
                        print(f"   ‚ùå {scenario['name']}: Unexpected status: {callback_response.status_code}")
                        
                except Exception as scenario_error:
                    print(f"   ‚ùå {scenario['name']}: Error: {str(scenario_error)}")
            
            if passed_scenarios == len(test_scenarios):
                self.log_test("Callback Error Handling", True, 
                            f"‚úÖ {passed_scenarios}/{len(test_scenarios)} sc√©narios d'erreur g√©r√©s correctement")
                return True
            else:
                self.log_test("Callback Error Handling", False, 
                            f"‚ùå {passed_scenarios}/{len(test_scenarios)} sc√©narios d'erreur g√©r√©s correctement")
                return False
                
        except Exception as e:
            self.log_test("Callback Error Handling", False, error=str(e))
            return False
    
    def test_token_exchange_with_facebook_api(self):
        """Test 6: Test token exchange mechanism with Facebook API"""
        try:
            print("üîë Test 6: Test token exchange mechanism")
            
            # This test simulates what happens when Facebook sends a real authorization code
            # We'll test the token exchange endpoint directly
            
            # Get Facebook credentials
            response = self.session.get(f"{BASE_URL}/social/facebook/auth-url", timeout=30)
            
            if response.status_code != 200:
                self.log_test("Token Exchange Mechanism", False, 
                            "Cannot get Facebook credentials")
                return False
            
            data = response.json()
            auth_url = data.get("auth_url", "")
            
            parsed_url = urlparse(auth_url)
            query_params = parse_qs(parsed_url.query)
            
            app_id = query_params.get('client_id', [None])[0]
            redirect_uri = query_params.get('redirect_uri', [None])[0]
            
            # Test Facebook token exchange endpoint directly
            # This is what our callback does internally
            facebook_token_url = "https://graph.facebook.com/v20.0/oauth/access_token"
            
            # Test with invalid code to see Facebook's response
            test_params = {
                "client_id": app_id,
                "redirect_uri": redirect_uri,
                "client_secret": "test_secret",  # This will fail but we can see the error
                "code": "test_authorization_code"
            }
            
            try:
                fb_response = requests.get(facebook_token_url, params=test_params, timeout=10)
                
                if fb_response.status_code == 400:
                    fb_data = fb_response.json()
                    error_message = fb_data.get("error", {}).get("message", "")
                    
                    # Check if it's the expected error for invalid client_secret
                    if "client_secret" in error_message.lower() or "app secret" in error_message.lower():
                        self.log_test("Token Exchange Mechanism", True, 
                                    f"‚úÖ Facebook token exchange endpoint accessible - Error: {error_message}")
                        return True
                    elif "verification code" in error_message.lower():
                        self.log_test("Token Exchange Mechanism", False, 
                                    f"‚ùå Facebook rejette format code - Error: {error_message}")
                        return False
                    else:
                        self.log_test("Token Exchange Mechanism", False, 
                                    f"‚ùå Erreur Facebook inattendue: {error_message}")
                        return False
                else:
                    self.log_test("Token Exchange Mechanism", False, 
                                f"‚ùå R√©ponse Facebook inattendue: {fb_response.status_code}")
                    return False
                    
            except Exception as fb_error:
                self.log_test("Token Exchange Mechanism", False, 
                            f"‚ùå Erreur connexion Facebook API: {str(fb_error)}")
                return False
                
        except Exception as e:
            self.log_test("Token Exchange Mechanism", False, error=str(e))
            return False
    
    def run_comprehensive_test(self):
        """Run comprehensive Facebook OAuth real flow test"""
        print("üéØ TEST OAUTH FACEBOOK FLOW R√âEL COMPLET")
        print("=" * 80)
        print(f"Backend URL: {BASE_URL}")
        print(f"Test User: {TEST_CREDENTIALS['email']}")
        print(f"Test Time: {datetime.now().isoformat()}")
        print("=" * 80)
        print()
        
        # Step 1: Authentication
        if not self.authenticate():
            print("‚ùå Authentication failed - cannot continue tests")
            return False
        
        # Test 1: Test Facebook credentials validity
        self.test_facebook_credentials_validity()
        
        # Test 2: Test Facebook App permissions
        self.test_facebook_app_permissions()
        
        # Test 3: Test redirect URI configuration
        self.test_redirect_uri_configuration()
        
        # Test 4: Test Facebook OAuth URL generation
        self.test_facebook_oauth_url_generation()
        
        # Test 5: Test callback error handling
        self.test_callback_error_handling()
        
        # Test 6: Test token exchange mechanism
        self.test_token_exchange_with_facebook_api()
        
        # Summary
        print("\n" + "=" * 80)
        print("üìä R√âSULTATS TEST OAUTH FACEBOOK FLOW R√âEL")
        print("=" * 80)
        
        passed = sum(1 for result in self.test_results if result["success"])
        total = len(self.test_results)
        
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"   {result['details']}")
        
        print(f"\nüéØ R√âSULTATS: {passed}/{total} tests r√©ussis ({(passed/total*100):.1f}%)")
        
        # Analyze results and provide recommendations
        failed_tests = [r['test'] for r in self.test_results if not r['success']]
        
        if passed == total:
            print("\nüéâ TOUS LES TESTS R√âUSSIS - OAUTH FACEBOOK PR√äT!")
            print("‚úÖ Credentials Facebook valides et reconnus")
            print("‚úÖ Permissions Facebook correctes")
            print("‚úÖ Redirect URI accessible")
            print("‚úÖ G√©n√©ration OAuth URLs fonctionnelle")
            print("‚úÖ Gestion erreurs callback correcte")
            print("‚úÖ M√©canisme token exchange pr√™t")
            return True
        else:
            print(f"\nüö® PROBL√àMES D√âTECT√âS - {total - passed} TESTS √âCHOU√âS")
            print("\nüîç PROBL√àMES IDENTIFI√âS:")
            
            for failed_test in failed_tests:
                if "Credentials Validity" in failed_test:
                    print("‚ùå CREDENTIALS FACEBOOK NON RECONNUS - App ID invalide ou app d√©sactiv√©e")
                elif "App Permissions" in failed_test:
                    print("‚ùå PERMISSIONS FACEBOOK INCORRECTES - Scope manquant ou incorrect")
                elif "Redirect URI" in failed_test:
                    print("‚ùå REDIRECT URI INACCESSIBLE - URL callback non configur√©e")
                elif "URL Generation" in failed_test:
                    print("‚ùå G√âN√âRATION OAUTH URLS D√âFAILLANTE - States ou format incorrect")
                elif "Error Handling" in failed_test:
                    print("‚ùå GESTION ERREURS CALLBACK D√âFAILLANTE - Redirections incorrectes")
                elif "Token Exchange" in failed_test:
                    print("‚ùå M√âCANISME TOKEN EXCHANGE D√âFAILLANT - Facebook API inaccessible")
            
            return False

def main():
    """Main test execution"""
    tester = FacebookOAuthRealTest()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\n‚úÖ Test OAuth Facebook flow r√©el termin√© avec succ√®s!")
        print("üöÄ Syst√®me pr√™t pour vraies reconnexions Facebook!")
        sys.exit(0)
    else:
        print("\n‚ùå Test OAuth Facebook flow r√©el r√©v√®le des probl√®mes!")
        print("üîß Corrections requises pour reconnexions Facebook!")
        sys.exit(1)

if __name__ == "__main__":
    main()